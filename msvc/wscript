# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os.path as osp
import pathlib
import shutil
from dataclasses import dataclass
from enum import Enum

from waflib import Configure, TaskGen, Utils, Logs, Build


class Module(str, Enum):
    ASTER = "aster"
    ASTER_CORE = "aster_core"
    ASTER_FONCTIONS = "aster_fonctions"
    MED_ASTER = "med_aster"
    LIBASTER = "libaster"


class ModuleAction(str, Enum):
    COPY = "copy"
    CUSTOM = "custom"


@dataclass
class ModuleTask:
    module: Module
    action: ModuleAction


_MODULE_TASKS = [
    ModuleTask(Module.ASTER, ModuleAction.CUSTOM),
    ModuleTask(Module.ASTER_CORE, ModuleAction.CUSTOM),
    ModuleTask(Module.ASTER_FONCTIONS, ModuleAction.CUSTOM),
    ModuleTask(Module.MED_ASTER, ModuleAction.CUSTOM),
    ModuleTask(Module.LIBASTER, ModuleAction.CUSTOM),
]


def options(self):
    self.load("compiler_c")


def configure(self):
    Logs.info("Configuring MSVC entrypoints")
    self.load("compiler_c")

    incpath = osp.join(self.path.get_src().abspath(), "c_entrypoints", "include")
    Logs.info(f"Adding {incpath} to include path")

    top_dir = pathlib.Path(self.path.get_bld().abspath()).parent.parent.parent

    include_name = "INCLUDES_ASTERPROXY"
    self.env.append_value(include_name, incpath)

    bibfor_incldir = osp.join(top_dir, "bibfor", "include")
    self.env.append_value(include_name, bibfor_incldir)

    bibc_incldir = osp.join(top_dir, "bibc", "include")
    self.env.append_value(include_name, bibc_incldir)

    bibcxx_incldir = osp.join(top_dir, "bibcxx", "include")
    self.env.append_value(include_name, bibcxx_incldir)

    bibcxx_incldir = osp.join(top_dir, "bibcxx")
    self.env.append_value(include_name, bibcxx_incldir)

    extern_incldir = osp.join(top_dir, "extern", "include")
    self.env.append_value(include_name, extern_incldir)

    py_incl_dir = pathlib.Path(self.env.PREFIX).resolve().absolute().parent / "include"
    self.env.append_value(include_name, py_incl_dir.as_posix())

    self.check_c_compiler_flags()


def build(self):
    Logs.info("Building MSVC entrypoints")
    env = self.all_envs[self.variant]

    # self(
    #     features="cxx cxxshlib",
    #     name="entry_helpers_proxy",
    #     source="c_entrypoints/entry_helpers.cxx",
    #     target="entry_helpers_proxy",
    #     defines="",
    #     use=["PYEXT"],
    #     env=env.derive(),
    #     install_path=env.ASTERLIBDIR,
    # )
    sources = ["c_entrypoints/entry_helpers.cxx"]
    use = ["PYBIND11", "PYEXT", "NUMPY"]
    # Build aster.pyd
    for mod_task in _MODULE_TASKS:
        mod_name = mod_task.module.value
        env_conf = env.derive()
        env_conf["INCLUDES"] = env["INCLUDES_ASTERPROXY"]
        if mod_task.action == ModuleAction.CUSTOM:
            self(
                features="cxx cxxshlib",
                name=f"{mod_name}_proxy",
                source=sources + [f"c_entrypoints/entry_{mod_name}.cxx"],
                target=f"{mod_name}_proxy",
                defines="",
                use=use,
                env=env_conf,
                install_path=env.ASTERLIBDIR,
            )
        self.add_post_fun(PostBuild(mod_task))


class PostBuild:
    def __init__(self, mod_task: ModuleTask):
        self.mod_task = mod_task

    def __call__(self, bld):
        top_dir = pathlib.Path(bld.top_dir).resolve().absolute()
        library_prefix_ = pathlib.Path(bld.env.PREFIX)
        dst = library_prefix_ / f'lib/aster/{self.mod_task.module.value}.pyd'
        if self.mod_task.action == ModuleAction.CUSTOM:
            src = top_dir / f'build/std/{bld.variant}/msvc/{self.mod_task.module.value}_proxy.dll'
            shutil.move(src, dst)
        elif self.mod_task.action == ModuleAction.COPY:
            if self.mod_task.module.value == "libaster":
                lib_dir_name = "bibcxx"
            else:
                lib_dir_name = "bibc"
            src = top_dir / f'build/std/{bld.variant}/{lib_dir_name}/{lib_dir_name}.dll'
            shutil.copy(src, dst)
        else:
            raise ValueError(f"Unknown action {self.mod_task.action}")




@Configure.conf
def check_c_compiler_flags(self):
    if self.env.CXX_NAME != 'msvc':
        self.check_c_compiler_options("-fPIC")
    self.start_msg("C compiler flags")
    self.end_msg(self.env["CFLAGS"])


@Configure.conf
def check_c_compiler_options(self, options):
    """Check C compiler options"""
    if type(options) not in (list, tuple):
        options = [options]
    self.start_msg("Checking for C option")
    if self.check_cc(cflags=options, mandatory=False):
        self.env.append_unique("CFLAGS", options)
        self.end_msg("yes (%s)" % " ".join(options))
    else:
        self.end_msg("no (%s)" % " ".join(options), "YELLOW")


@Configure.conf
def check_optimization_cflags(self):
    self.setenv("debug")
    self.start_msg("Setting C debug flags")
    self.remove_optflags("CFLAGS")
    flags = ["-g", "-O0"] + Utils.to_list(self.env["CFLAGS_ASTER_DEBUG"])
    if self.options.enable_coverage:
        flags.append("--coverage")
        self.env.append_unique("LINKFLAGS", "--coverage")
    if self.options.enable_asan:
        flags.extend(["-fsanitize=address", "-fno-omit-frame-pointer"])
        self.env.append_unique("LINKFLAGS", ["-fsanitize=address", "-fno-omit-frame-pointer"])
    self.env.append_unique("CFLAGS", flags)
    self.end_msg(flags)

    self.setenv("release")
    self.start_msg("Setting C optimization flags")
    flags = ["-O2"]
    self.env.append_unique("CFLAGS", flags)
    self.end_msg(flags)


@Configure.conf
def check_optimization_cflags_msvc(self):
    self.setenv("debug")
    self.start_msg("Setting C debug flags for MSVC")
    self.remove_optflags("CFLAGS")
    debug_flags = ["/Zi", "/Od"]  # Debug information and no optimization
    self.env.append_unique("LINKFLAGS", ["/DEBUG:FULL", "/INCREMENTAL:NO"])
    self.env.append_unique("CFLAGS", debug_flags)
    if self.options.enable_coverage:
        # Note: MSVC does not have a direct --coverage equivalent
        # You may need to use external tools or Visual Studio features for coverage
        pass
    if self.options.enable_asan:
        # Enable Address Sanitizer (available in recent MSVC versions)
        asan_flags = ["/fsanitize=address"]
        self.env.append_unique("CFLAGS", asan_flags)
        self.env.append_unique("LINKFLAGS", asan_flags)
    self.end_msg(debug_flags)

    self.setenv("release")
    self.start_msg("Setting C optimization flags for MSVC")
    optimization_flags = ["/O2"]  # Maximize speed
    self.env.append_unique("CFLAGS", optimization_flags)
    self.end_msg(optimization_flags)
