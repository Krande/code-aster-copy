name: ci-code-aster-build

# bump 1
on:
  workflow_dispatch:
  push:
    branches:
      - win-support
#    - donotrun
env:
  CONDA_FILE: ""
  OUTPUT_DIR: "${{ github.workspace }}\\test_output"

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: ${{ matrix.builds.os_brief }} - ${{ matrix.builds.build }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.builds.os }}
    strategy:
      fail-fast: false
      matrix:
        builds: [
          { os: windows-latest, build: .ci_nompi_release_64, os_brief: win },
          { os: windows-latest, build: .ci_nompi_debug_64, os_brief: win },
          { os: windows-latest, build: .ci_nompi_release_32, os_brief: win },
          { os: windows-latest, build: .ci_nompi_debug_32, os_brief: win },
          { os: ubuntu-latest, build: .ci_nompi_release_64, os_brief: linux }
        ]
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: '1'

      - uses: ./.github/actions/install-intel-fortran
        if: ${{ runner.os == 'Windows' }}
        with:
          version: 2025.0.0
          activate: false

      - uses: prefix-dev/setup-pixi@v0.8.2
        with:
          pixi-version: v0.41.3
          activate-environment: conda
          cache: true

      - name: Build Code_Aster
        shell: bash
        run: |
          pixi run cbuild --no-test -m conda/${{ matrix.builds.build }}.yaml

      - name: If failed build, upload log
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: BuildLog-${{ runner.os }}-${{ github.run_id }}
          path: ${{ github.workspace }}/output/bld

      - name: Find the outputted .conda file and set it as an output
        run: |
          import pathlib
          import os
          
          output_dir = pathlib.Path("output").resolve()
          conda_files = list(output_dir.rglob("*.conda"))
          if len(conda_files) != 1:
              raise ValueError(f"Expected 1 .conda file, found {len(conda_files)}")
          conda_file = conda_files[0]
          with open(os.environ["GITHUB_ENV"], "a") as env_file:
                env_file.write(f"CONDA_FILE={conda_file.as_posix()}\n")

        shell: pixi run python {0}

      - name: run rattler test
        if: ${{ runner.os == 'Windows' }}
        continue-on-error: true # Prevent the workflow from failing
        run: |
          pixi run ctest --package-file ${{ env.CONDA_FILE }}

      - name: run rattler test
        if: ${{ runner.os != 'Windows' }}
        continue-on-error: true # Prevent the workflow from failing
        run: |
          pixi run ctest --package-file ${{ env.CONDA_FILE }}

      - name: Export test results
        run: |
          pixi run test-eval --set-passing-env-var

      - name: Upload all packages
        if: ${{ env.PASSED_TESTS != '' && fromJson(env.PASSED_TESTS) > 80.0 }}
        shell: pixi run bash -e {0}
        run: |
          shopt -s nullglob
          EXIT_CODE=0
          for pkg in $(find output -type f \( -name "*.conda" -o -name "*.tar.bz2" \) ); do
            if ! rattler-build upload prefix -c code-aster "${pkg}"; then
              EXIT_CODE=1
            fi
          done
          exit $EXIT_CODE

      - name: Save Run directory to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TestResults-${{ matrix.builds.os_brief }}-${{ matrix.builds.build }}-${{ github.run_id }}
          path: ${{ env.OUTPUT_DIR }}
