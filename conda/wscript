# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os.path as osp
import pathlib
import sys

from waflib import Configure, TaskGen, Utils, Logs, Build


def options(self):
    self.load("compiler_c")


def configure(self):
    Logs.info("Configuring MSVC entrypoints")
    self.load("compiler_c")

    opts = self.options
    # preserve symbols in the dyn table for stdcallsspo

    incpath = osp.join(self.path.get_src().abspath(), "include")
    self.env.append_value("INCLUDES_ASTERENTRY", incpath)

    top_dir = pathlib.Path(self.path.get_bld().abspath()).parent.parent

    bibfor_incldir = osp.join(top_dir, "bibfor", "include")
    self.env.append_value("INCLUDES_ASTERENTRY", bibfor_incldir)

    bibcxx_incldir = osp.join(top_dir, "bibcxx", "include")
    self.env.append_value("INCLUDES_ASTERENTRY", bibcxx_incldir)

    if "ifort" in self.env.FC_NAME.lower():
        self.env.append_value("LINKFLAGS_fcprogram", ["-nofor-main"])
        if opts.embed_all or opts.embed_aster:
            self.env.append_value("LINKFLAGS_fcprogram", ["-static-intel"])
            if self.get_define("ASTER_HAVE_MPI"):
                self.env.append_value("LINKFLAGS_fcprogram", ["-static-mpi"])
    self.check_c_compiler_flags()


def build(self):
    Logs.info("Building MSVC entrypoints")
    get_srcs = self.path.get_src().ant_glob
    env = self.all_envs[self.variant]
    use = ["BIBC"]

    # Build aster.pyd
    self(
        features="c cshlib",
        name="aster_entry",
        source="c_entrypoints/entry_aster.c",
        target="aster.pyd",
        defines="",
        use=use,
        env=env.derive(),
        install_path=env.ASTERLIBDIR,
    )

    self.install_files(env.ASTERINCLUDEDIR, get_srcs("include/*.h"))
