schema_version: 1

context:
  name: code-aster
  source_version: 17.2.6
  win_build: 1
  version: ${{ source_version + "." + win_build }}
  build_base: 0
  mpi_num: ${{ 100 if mpi == 'nompi' else 0 }}
  build: ${{ (200 if build_type == 'release' else 0) + int_type|int + mpi_num|int + build_base|int }}
  mpi_prefix: ${{ mpi or 'nompi' }}

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  - path: ..

build:
  number: ${{ build }}
  string: py${{ python | replace('.', '') }}_${{ mpi_prefix }}_${{ build_type }}_INT${{ int_type }}_h${{ hash }}_${{ build }}

requirements:
  build:
    - ${{ compiler('c') }}
    - ${{ compiler('cxx') }}
    - if: not win
      then:
        - ${{ compiler('fortran') }}
        - libgomp
    - pyyaml
    - waf ==2.0.27
    - if: win
      then: clang
    - setuptools
  host:
    - python
    - numpy
    - libboost-devel
    - if: win
      then: mkl-devel
    - if: not win
      then: openblas
    - libblas
    - liblapack
    - libxml2
    - zlib
    - if: win
      then:
        - metis * *${{ build_type }}*INT${{ int_type }}*
        - mumps * *${{ build_type }}*INT${{ int_type }}*
        - mfront * *${{ build_type }}*
        - mgis * *${{ build_type }}*
        - libmed * *${{ build_type }}*INT${{ int_type }}*
        - scotch * *${{ build_type }}*INT${{ int_type }}*
        - medcoupling * *${{ build_type }}*INT${{ int_type }}*
        - psutil
    - if: not win
      then:
        - "libscotch * *debug*"
        - "scotch * *debug*"
        - "metis * *debug*"
        - "mumps * *debug*"
        - mfront
        - mgis
        - libmed
        - medcoupling
  run:
    - if: win
      then:
        - intel-fortran-rt
        - "libblas * *mkl"
        - "liblapack * *mkl"
    - ${{ pin_compatible('numpy', upper_bound='x.x') }}
    - if: not win
      then:
        - libxcrypt
        - ${{ pin_compatible('mgis', upper_bound='x.x') }}  # this is not given a run_export in conda-forge
  run_exports:
    - ${{ pin_subpackage(name, upper_bound='x.x') }}
  ignore_run_exports:
    by_name:
      - llvm-openmp

tests:
  - script:
      - run_ctest --resutest=${{ env.get("OUTPUT_DIR", default="temp\\seq") }} -L submit -L sequential -LE need_data --timefactor=10.0 --only-failed-results
      - if errorlevel 1 exit 1
    requirements:
      run:
        - cmake
  - python:
      imports:
        - code_aster
      pip_check: false



about:
  license: GPL-3.0-only AND CECILL-C AND Apache-2.0 AND LGPL-3.0-only
  summary: Code_Aster - a finite element solver
  description: |
    Code_Aster offers a full range of multiphysical analysis and modelling methods that go well beyond the standard functions of a thermomechanical calculation code: from seismic analysis to porous media via acoustics, fatigue, stochastic dynamics, etc..
  homepage: https://www.code-aster.org
  repository: https://sourceforge.net/projects/codeaster/
  documentation: https://www.code-aster.org/V2/doc/default/en/index.php?man=commande

extra:
  recipe-maintainers:
    - Krande



