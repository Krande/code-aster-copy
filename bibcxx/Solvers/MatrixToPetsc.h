#ifndef MATRIXTOPETSC_H_
#define MATRIXTOPETSC_H_

/**
 * @file MatrixToPetsc.h
 * @brief Definition of functions to convert matrix to PETSc
 * @author Mathieu Courtois
 * @section LICENCE
 *   Copyright (C) 1991 - 2021  EDF R&D                www.code-aster.org
 *
 *   This file is part of Code_Aster.
 *
 *   Code_Aster is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Code_Aster is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Code_Aster.  If not, see <http://www.gnu.org/licenses/>.
 */

/* person_in_charge: mathieu.courtois@edf.fr */

#include "LinearAlgebra/AssemblyMatrix.h"
#include "Loads/PhysicalQuantity.h"
#include "astercxx.h"

/** @brief Turns PETSc off */
void petscFinalize();

/** @brief Turns PETSc on with options */
void petscInitializeWithOptions( const std::string &options );

#ifdef ASTER_HAVE_PETSC4PY
/* Define struct objects as generated by cython.

echo "from petsc4py.PETSc cimport PetscMat" > genStruct.pyx
cython -3 -I<path-to>/petsc-X.Y/lib -o genStruct.cc genStruct.pyx

*/

struct PyPetscObjectObject {
    PyObject_HEAD struct __pyx_vtabstruct_8petsc4py_5PETSc_Object *__pyx_vtab;
    PyObject *__weakref__;
    PyObject *__pyx___dummy__;
    PetscObject oval;
    PetscObject *obj;
};
typedef struct PyPetscObjectObject PyPetscObjectObject;

struct PyPetscMatObject {
    struct PyPetscObjectObject __pyx_base;
    Mat mat;
};
typedef struct PyPetscMatObject PyPetscMatObject;

#endif

/** @brief Convert an AssemblyMatrix object to a PETSc Mat object */
PyObject *assemblyMatrixToPetsc( const AssemblyMatrixDisplacementRealPtr );

#endif
