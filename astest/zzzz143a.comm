# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *
from code_aster import CA

DEBUT(CODE=_F(NIV_PUB_WEB="INTERNET"), ERREUR=_F(ALARME="EXCEPTION"))

MA = LIRE_MAILLAGE(UNITE=20, FORMAT="MED")

TAN_E = 1e8

TEMP0 = 20
PARA0 = 1.0
DELTA_TEMP = 1.0

TEMP1 = TEMP0 + DELTA_TEMP
PARA1 = PARA0 + TAN_E * DELTA_TEMP
INST0, INST1 = 0, 1

ZERO = DEFI_CONSTANTE(VALE=0)
NU = DEFI_CONSTANTE(VALE=0.3)

PARA = DEFI_FONCTION(NOM_PARA="TEMP", VALE=(TEMP0, PARA0, TEMP1, PARA1))

PARABIDON = DEFI_CONSTANTE(VALE=50)

# Pour avoir l'Ã©quivalence en thermique PARM_THETA doit etre = 1
THETA = 1

MAT_FONC = DEFI_MATERIAU(
    ELAS_FO=_F(E=PARA, NU=NU, ALPHA=ZERO, TEMP_DEF_ALPHA=TEMP0),
    THER_FO=_F(LAMBDA=PARA, RHO_CP=ZERO),
)


MAT_TEMP0 = DEFI_MATERIAU(
    ELAS=_F(E=PARA(TEMP0), NU=NU(TEMP0), ALPHA=PARABIDON(TEMP0)),
    THER=_F(LAMBDA=PARA(TEMP0), RHO_CP=PARABIDON(TEMP0)),
)

MAT_TEMP1 = DEFI_MATERIAU(
    ELAS=_F(E=PARA(TEMP1), NU=NU(TEMP1), ALPHA=PARABIDON(TEMP1)),
    THER=_F(LAMBDA=PARA(TEMP1), RHO_CP=PARABIDON(TEMP1)),
)

MODME = AFFE_MODELE(
    MAILLAGE=MA, AFFE=(_F(GROUP_MA="plaque", MODELISATION="3D", PHENOMENE="MECANIQUE"),)
)

MODTH = AFFE_MODELE(
    MAILLAGE=MA, AFFE=(_F(GROUP_MA="plaque", MODELISATION="3D", PHENOMENE="THERMIQUE"),)
)

CHINTEMP0 = CREA_CHAMP(
    TYPE_CHAM="NOEU_TEMP_R",
    OPERATION="AFFE",
    MAILLAGE=MA,
    AFFE=_F(GROUP_MA="plaque", NOM_CMP="TEMP", VALE=TEMP0),
)

CHINTEMP1 = CREA_CHAMP(
    TYPE_CHAM="NOEU_TEMP_R",
    OPERATION="AFFE",
    MAILLAGE=MA,
    AFFE=_F(GROUP_MA="plaque", NOM_CMP="TEMP", VALE=TEMP1),
)

CHAUFFE = CREA_RESU(
    OPERATION="AFFE",
    TYPE_RESU="EVOL_THER",
    NOM_CHAM="TEMP",
    AFFE=(_F(CHAM_GD=CHINTEMP0, INST=INST0), _F(CHAM_GD=CHINTEMP1, INST=INST1)),
)


CHMATTH_FONC = AFFE_MATERIAU(
    MODELE=MODTH,
    AFFE=(_F(GROUP_MA="plaque", MATER=MAT_FONC)),
    AFFE_VARC=_F(GROUP_MA="plaque", NOM_VARC="TEMP", EVOL=CHAUFFE, NOM_CHAM="TEMP", VALE_REF=TEMP0),
)

CHMATTH_TEMP0 = AFFE_MATERIAU(MODELE=MODTH, AFFE=(_F(GROUP_MA="plaque", MATER=MAT_TEMP0)))

CHMATTH_TEMP1 = AFFE_MATERIAU(MODELE=MODTH, AFFE=(_F(GROUP_MA="plaque", MATER=MAT_TEMP1)))

CHMATME_FONC = AFFE_MATERIAU(
    MODELE=MODME,
    AFFE=(_F(GROUP_MA="plaque", MATER=MAT_FONC)),
    AFFE_VARC=_F(GROUP_MA="plaque", NOM_VARC="TEMP", EVOL=CHAUFFE, NOM_CHAM="TEMP", VALE_REF=TEMP0),
)

CHMATME_TEMP0 = AFFE_MATERIAU(MODELE=MODME, AFFE=(_F(GROUP_MA="plaque", MATER=MAT_TEMP0)))

CHMATME_TEMP1 = AFFE_MATERIAU(MODELE=MODME, AFFE=(_F(GROUP_MA="plaque", MATER=MAT_TEMP1)))


ANTI_MECA_31 = AFFE_CHAR_CINE(
    MODELE=MODME,
    MECA_IMPO=(
        _F(GROUP_MA="face_xmin", DZ=0.0, DY=0.0),
        _F(GROUP_MA="face_ymin", DY=0.0),
        _F(GROUP_MA="face_zmin", DX=0.0, DY=0.0),
        _F(GROUP_MA="face_xmax", DZ=0.0, DY=0.0),
        _F(GROUP_MA="face_ymax", DY=0.0),
        _F(GROUP_MA="face_zmax", DX=0.0, DY=0.0),
    ),
)

CHAR31 = AFFE_CHAR_MECA(MODELE=MODME, PRE_EPSI=_F(GROUP_MA="plaque", EPXZ=-1.0))


SYME_THER_11 = AFFE_CHAR_CINE(
    MODELE=MODTH, THER_IMPO=(_F(GROUP_MA="face_xmin", TEMP=0.0), _F(GROUP_MA="face_xmax", TEMP=0.0))
)

CHAR1 = AFFE_CHAR_THER(MODELE=MODTH, PRE_GRAD_TEMP=_F(GROUP_MA="plaque", FLUX_X=-1.0))


L_INST = DEFI_LIST_REEL(VALE=(INST0, INST1))


#######STATIQUE

DEPL31_FONC = MECA_STATIQUE(
    MODELE=MODME,
    CHAM_MATER=CHMATME_FONC,
    LIST_INST=L_INST,
    EXCIT=(_F(CHARGE=CHAR31), _F(CHARGE=ANTI_MECA_31)),
)

DEPL31_TEMP0 = MECA_STATIQUE(
    MODELE=MODME, CHAM_MATER=CHMATME_TEMP0, EXCIT=(_F(CHARGE=CHAR31), _F(CHARGE=ANTI_MECA_31))
)

DEPL31_TEMP1 = MECA_STATIQUE(
    MODELE=MODME, CHAM_MATER=CHMATME_TEMP1, EXCIT=(_F(CHARGE=CHAR31), _F(CHARGE=ANTI_MECA_31))
)

#######THERMIQUE

TEMP_FONC = THER_LINEAIRE(
    MODELE=MODTH,
    CHAM_MATER=CHMATTH_FONC,
    PARM_THETA=THETA,
    INCREMENT=_F(LIST_INST=L_INST),
    EXCIT=(_F(CHARGE=CHAR1), _F(CHARGE=SYME_THER_11)),
)

L0 = DEFI_LIST_REEL(VALE=0.0)

TEMP_TEMP0 = THER_LINEAIRE(
    MODELE=MODTH,
    CHAM_MATER=CHMATTH_TEMP0,
    EXCIT=(_F(CHARGE=CHAR1), _F(CHARGE=SYME_THER_11)),
    TYPE_CALCUL="STAT",
    INCREMENT=_F(LIST_INST=L0),
)

TEMP_TEMP1 = THER_LINEAIRE(
    MODELE=MODTH,
    CHAM_MATER=CHMATTH_TEMP1,
    EXCIT=(_F(CHARGE=CHAR1), _F(CHARGE=SYME_THER_11)),
    TYPE_CALCUL="STAT",
    INCREMENT=_F(LIST_INST=L0),
)

TEMP_STAT = THER_LINEAIRE(
    MODELE=MODTH,
    CHAM_MATER=CHMATTH_FONC,
    TYPE_CALCUL="STAT",
    INCREMENT=_F(LIST_INST=L_INST),
    EXCIT=(_F(CHARGE=CHAR1), _F(CHARGE=SYME_THER_11)),
)

norm_diff_depl_t0 = (DEPL31_FONC.getField("DEPL", 1) - DEPL31_TEMP0.getField("DEPL", 1)).norm(
    "NORM_2"
)
norm_diff_depl_t1 = (DEPL31_FONC.getField("DEPL", 2) - DEPL31_TEMP1.getField("DEPL", 1)).norm(
    "NORM_2"
)

norm_diff_temp_t0 = (TEMP_FONC.getField("TEMP", 0) - TEMP_TEMP0.getField("TEMP", 1)).norm("NORM_2")
norm_diff_temp_t1 = (TEMP_FONC.getField("TEMP", 1) - TEMP_TEMP1.getField("TEMP", 1)).norm("NORM_2")

norm_diff_stat_t0 = (TEMP_STAT.getField("TEMP", 1) - TEMP_TEMP0.getField("TEMP", 1)).norm("NORM_2")
norm_diff_stat_t1 = (TEMP_STAT.getField("TEMP", 2) - TEMP_TEMP1.getField("TEMP", 1)).norm("NORM_2")

# test issue32843
test_field = DEPL31_FONC.getField("DEPL", 1)
ma_mod = MODI_MAILLAGE(MAILLAGE=MA, DEFORME=_F(OPTION="TRAN", DEPL=test_field))

test = CA.TestCase()

nbplaces = 10
test.assertAlmostEqual(norm_diff_depl_t0, 0, places=nbplaces, msg="NORM_DIFF_DEPL_TEMP0")
test.assertAlmostEqual(norm_diff_depl_t1, 0, places=nbplaces, msg="NORM_DIFF_DEPL_TEMP1")
test.assertAlmostEqual(norm_diff_temp_t0, 0, places=nbplaces, msg="NORM_DIFF_TEMP_TEMP0")
test.assertAlmostEqual(norm_diff_temp_t1, 0, places=nbplaces, msg="NORM_DIFF_TEMP_TEMP1")
test.assertAlmostEqual(norm_diff_stat_t0, 0, places=nbplaces, msg="NORM_DIFF_STAT_TEMP0")
test.assertAlmostEqual(norm_diff_stat_t1, 0, places=nbplaces, msg="NORM_DIFF_STAT_TEMP1")
test.printSummary()

FIN()
