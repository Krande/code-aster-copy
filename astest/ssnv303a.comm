# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2021 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),)

# Read mesh
MESH0 = LIRE_MAILLAGE(FORMAT='MED',
                      UNITE=20)

# Prepare mesh
mesh=CREA_MAILLAGE(MAILLAGE     = MESH0,
                   INFO         = 2,
                   COQUE_SOLIDE = _F(GROUP_MA      = 'AllVoluCells',
                                     GROUP_MA_SURF = 'FaceSup',
                                  ),
                  )

# Select finite elements
model=AFFE_MODELE(MAILLAGE = mesh,
                  AFFE     = _F(TOUT='OUI',
                                PHENOMENE='MECANIQUE',
                                MODELISATION=('COQUE_SOLIDE',),
                             ),
                 )

# Material parameters
mater = DEFI_MATERIAU(ELAS      = _F(E           = 10000000.0,
                                     NU          = 0.3),)

matfield = AFFE_MATERIAU(AFFE=_F(MATER=(mater, ),
                                 TOUT='OUI'),
                         MODELE=model)

# Boundary conditions and loads
clamp = AFFE_CHAR_MECA(DDL_IMPO=_F(DX=0.0,
                                   DY=0.0,
                                   DZ=0.0,
                                   GROUP_MA=('FaceLeft', )),
                       MODELE=model)

load = AFFE_CHAR_MECA(FORCE_FACE=_F(FZ       = 400.0,
                                    GROUP_MA = ('FaceRight', )),
                      MODELE=model)

# Calcul élastique linéaire
rampUnit = DEFI_FONCTION(NOM_PARA='INST',
                         VALE=(0.0, 0.0, 1.0, 1.0))

timeStepper = DEFI_LIST_REEL(DEBUT=0.0,
                             INTERVALLE=_F(JUSQU_A=1.0,
                                           NOMBRE=1))

times = DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=timeStepper),
                       ECHEC=_F(ACTION='DECOUPE',
                                EVENEMENT='ERREUR'))

resuElas = STAT_NON_LINE(MODELE       = model,
                         CHAM_MATER   = matfield,
                         COMPORTEMENT =_F(DEFORMATION = 'PETIT',
                                          RELATION    = 'ELAS',
                                          TOUT        = 'OUI'),
                         EXCIT        = (_F(CHARGE=clamp),
                                         _F(CHARGE=load, FONC_MULT=rampUnit)),
                         INCREMENT    =  _F(LIST_INST=times),
                         CONVERGENCE  =  _F(ITER_GLOB_MAXI = 15,
                                            SIGM_REFE      = 1.E6,
                                            RESI_REFE_RELA = 1.0E-6,),
                         )

# Post-traitement
resuElas = CALC_CHAMP(reuse      = resuElas,
                      RESULTAT   = resuElas,
                      CONTRAINTE = ('SIEF_NOEU'),
                   #   FORCE      = ('FORC_NODA'),
                      CRITERES   = ('SIEQ_ELGA', 'SIEQ_NOEU'),)

#IMPR_RESU(RESU=_F(RESULTAT=resuElas),
#          UNITE=80)

# Test des valeurs du calcul
# Valeurs de référence (référence: 3D overkill)
nodeISup_DEPLDZ_Refe   = 15.840541161507563
nodeCSup_SIEQVMIS_Refe =  179942.6763273311
nodeESup_SIEQVMIS_Refe =  120010.92889717518
nodeGSup_SIEQVMIS_Refe =  60023.91296327567

# Valeurs calculées
nodeISup_DEPLDZ_Calc   = 15.824552988952265
nodeCSup_SIEQVMIS_Calc = 180018.00544926213
nodeESup_SIEQVMIS_Calc = 120015.4120347967
nodeGSup_SIEQVMIS_Calc = 60032.389440171144

nodeISup_DEPLDZ_Tole   = 0.01 * 1.1E-1
nodeCSup_SIEQVMIS_Tole = 0.01 * 4.2E-2
nodeESup_SIEQVMIS_Tole = 0.01 * 3.8E-3
nodeGSup_SIEQVMIS_Tole = 0.01 * 1.5E-2

TEST_RESU(RESU=_F(GROUP_NO  = ('NodeISup', ),
                  INST      = 1.0,
                  NOM_CHAM  = 'DEPL',
                  NOM_CMP   = 'DZ',
                  RESULTAT  = resuElas,
                  VALE_CALC = nodeISup_DEPLDZ_Calc,
                  REFERENCE = 'AUTRE_ASTER',
                  PRECISION = nodeISup_DEPLDZ_Tole,
                  VALE_REFE = nodeISup_DEPLDZ_Refe,),)

TEST_RESU(RESU=(_F(GROUP_NO  = ('NodeCSup', ),
                   INST      = 1.0,
                   NOM_CHAM  = 'SIEQ_NOEU',
                   NOM_CMP   = 'VMIS',
                   RESULTAT  = resuElas,
                   REFERENCE = 'AUTRE_ASTER',
                   VALE_CALC = nodeCSup_SIEQVMIS_Calc,
                   PRECISION = nodeCSup_SIEQVMIS_Tole,
                   VALE_REFE = nodeCSup_SIEQVMIS_Refe,),
                _F(GROUP_NO  = ('NodeESup', ),
                   INST      = 1.0,
                   NOM_CHAM  = 'SIEQ_NOEU',
                   NOM_CMP   = 'VMIS',
                   RESULTAT  = resuElas,
                   REFERENCE = 'AUTRE_ASTER',
                   VALE_CALC = nodeESup_SIEQVMIS_Calc,
                   PRECISION = nodeESup_SIEQVMIS_Tole,
                   VALE_REFE = nodeESup_SIEQVMIS_Refe,),
                _F(GROUP_NO  = ('NodeGSup', ),
                   INST      = 1.0,
                   NOM_CHAM  = 'SIEQ_NOEU',
                   NOM_CMP   = 'VMIS',
                   RESULTAT  = resuElas,
                   REFERENCE = 'AUTRE_ASTER',
                   VALE_CALC = nodeGSup_SIEQVMIS_Calc,
                   PRECISION = nodeGSup_SIEQVMIS_Tole,
                   VALE_REFE = nodeGSup_SIEQVMIS_Refe,),
                 ),)

FIN()
