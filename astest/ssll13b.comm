# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2022 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT( CODE = _F( NIV_PUB_WEB = 'INTERNET'),
       DEBUG = _F( SDVERI = 'OUI'),
       IGNORE_ALARM = (
        'CALCULEL7_13',
        'CALCULEL_88',
        'CALCULEL7_29',
         ));

MA = LIRE_MAILLAGE( FORMAT = "MED",
                    UNITE = 20);

MODEL = AFFE_MODELE( MAILLAGE = MA,
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                PHENOMENE = 'MECANIQUE',
                                MODELISATION = 'POU_D_E'),);

CARA = AFFE_CARA_ELEM( MODELE=MODEL,
                       POUTRE=_F(CARA=('HY', 'HZ'),
                                 GROUP_MA=('PoutreAB', ),
                                 SECTION='RECTANGLE',
                                 VALE=(0.5, 0.3)))

# on cree une sd evol_elas avec des champs d'efforts imposes :
#-------------------------------------------------------------
#compression uniforme + effort transversal
CHEFF1 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (-1.e6, 0.0, 1.e5, 0.0, 0.0, 0.0),),);

#section totalement tendue (pivot A "vertical") + effort transversal
CHEFF2 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (1.e6, 0.0, -1.e5, 0.0, 0.0, 0.0),),);

#section totalement tendue (pivot A "vertical") + torsion
CHEFF3 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (1.e6, 0.0, -1.e5, 1.e4, 0.0, 0.0),),);

#fibre inférieure tendue en Z
CHEFF4 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (0.0, 0.0, 0.0, 0.0, 0.0, 1.e5),),);

#fibre supérieure tendue en Y
CHEFF5 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (0.0, 0.0, 0.0, 0.0, -1.e5, 0.0),),);

#section partiellement tendue
CHEFF6 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (1.e5, 0.0, 0.0, 0.0, 0.0, -1.e5),),);

#section partiellement tendue
CHEFF7 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (1.e5, 0.0, 0.0, 0.0, -1.e5, 0.0),),);

#section totalement tendue
CHEFF8 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (2.e6, 0.0, 0.0, 0.0, 0.0, -1.e5),),);

#flexion déviée
CHEFF9 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (0.0, 0.0, 0.0, 0.0, -15.e4, 1.e5),),);

#flexion déviée composée
CHEFF10 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (-3.e6, 0.0, 0.0, 0.0, -15.e4, 1.e5),),);

CHEFF11 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                 VALE     = ( 0.0,  0.0,  0.0,  0.0, 0.0, -150e3),),);

#pivot B 
CHEFF12 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                 VALE     = ( 0.0,  0.0,  0.0,  0.0, 0.0, -26e4),),);

# vrai pivot C avec compression totale dune facette sur la section entière
CHEFF13 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                 VALE     = ( 0.0,  0.0,  0.0,  0.0, 0.0, -38e4),),);

CHEFF14 = CREA_CHAMP( MAILLAGE = MA, OPERATION = 'AFFE', TYPE_CHAM = 'CART_SIEF_R',
                     AFFE = _F( GROUP_MA = 'PoutreAB',
                                NOM_CMP = ('N','VY','VZ','MT','MFY','MFZ'),
                                VALE     = (-45.e5, 1.e5, 0.0, 0.0, 0.0, 38.e4),),);


RESUELS = CREA_RESU( OPERATION = 'AFFE',
                     TYPE_RESU = 'EVOL_ELAS',
                     NOM_CHAM = 'EFGE_ELNO',
                     AFFE = (_F( CHAM_GD = CHEFF1, INST = 1., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF2, INST = 2., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF3, INST = 3., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF4, INST = 4., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF5, INST = 5., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF6, INST = 6., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF7, INST = 7., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF8, INST = 8., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF9, INST = 9., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF10, INST = 10., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF11, INST = 11., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF12, INST = 12., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF13, INST = 13., MODELE = MODEL, CARA_ELEM = CARA,),
                             _F( CHAM_GD = CHEFF14, INST = 14., MODELE = MODEL, CARA_ELEM = CARA),),);


# CAS 1 - calcul du ferraillage :
#--------------------------------

RESUELS1 = CALC_FERRAILLAGE(RESULTAT = RESUELS, reuse = RESUELS,
                            CODIFICATION = 'EC2',
                            TYPE_COMB = 'ELS',
                            INST = (1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.),
                            AFFE = (_F( TOUT = 'OUI',
                                        TYPE_STRUCTURE = '1D',
                                        C_SUP_Y = 0.04,
                                        C_INF_Y = 0.04,
                                        C_SUP_Z = 0.04,
                                        C_INF_Z = 0.04,
                                        FCK = 35.e6,
                                        SIGS_ELS = 400.0e6,
                                        SIGC_INF_Y_ELS = 0.6*35.e6,
                                        SIGC_SUP_Y_ELS = 0.6*35.e6,
                                        SIGC_INF_Z_ELS = 0.6*35.e6,
                                        SIGC_SUP_Z_ELS = 0.6*35.e6,
                                        ALPHA_E = 15.,
                                        UNITE_CONTRAINTE = 'Pa',
                                        UNITE_DIMENSION = 'm',
                                        RHO_ACIER = 7800.),),);

COMP = ['AYI','AYS','AZI','AZS','AST','ATOT','DNSVOL','CONSTRUC'];
#-----------------------------------------------------
# Tests pour CAS 1
#-----------------------------------------------------
D_ref = [
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00042731994721662676,  0.00000000000000E+00,  11.110318627632296,  0.050623169746929715], #1
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.00042731994721662676,  2.50000000000000E-03,  141.11031862763232,  0.3395120586358187], #2
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  5.32506395762258E-04,  2.50000000000000E-03,  1.43845166289819E+02,  3.51973146573525E-01], #3
           [5.88764731062629E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.88764731062629E-04,  3.06157660152567E+01,  6.80350355894593E-02], #4
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.12366540980608E-03,  0.00000000000000E+00,  1.12366540980608E-03,  5.84306013099163E+01,  1.29845780688703E-01], #5
           [0.00000000000000E+00,  7.17105206758613E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  7.17105206758613E-04,  3.72894707514479E+01,  8.28654905587730E-02], #6
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.22610843146645E-03,  0.00000000000000E+00,  1.22610843146645E-03,  6.37576384362556E+01,  1.41683640969457E-01], #7
           [1.90476190476191E-03,  3.09523809523809E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.00000000000000E-03,  2.60000000000000E+02,  5.77777777777778E-01], #8
           [5.27197746355514E-03,  0.00000000000000E+00,  0.00000000000000E+00,  2.04769464728438E-02,  0.00000000000000E+00,  2.57489239363990E-02,  1.33894404469275E+03,  2.97543121042833E+00], #9
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00], #10
           [0.00000000000000E+00,  9.40793185475018E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  9.40793185475018E-04,  4.89212456447010E+01,  1.08713879210447E-01], #11
           [0.00000000000000E+00,  1.81233586420538E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.81233586420538E-03,  9.42414649386799E+01,  2.09425477641511E-01], #12
           [0.00000000000000E+00,  1.14849671854544E-02,  0.00000000000000E+00,  0.00000000000000E+00 , 0.00000000000000E+00,  1.14849671854544E-02,  5.97218293643630E+02,  1.32715176365251E+00], #13
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00], #14
];

D_calc = [
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00042731994721662676,  0.00000000000000E+00,  11.110318627632296,  0.050623169746929715], #1
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.00042731994721662676,  2.50000000000000E-03,  141.11031862763232,  0.3395120586358187], #2
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  5.32506395762258E-04,  2.50000000000000E-03,  1.43845166289819E+02,  3.51973146573525E-01], #3
           [5.88764731062629E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.88764731062629E-04,  3.06157660152567E+01,  6.80350355894593E-02], #4
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.12366540980608E-03,  0.00000000000000E+00,  1.12366540980608E-03,  5.84306013099163E+01,  1.29845780688703E-01], #5
           [0.00000000000000E+00,  7.17105206758613E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  7.17105206758613E-04,  3.72894707514479E+01,  8.28654905587730E-02], #6
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.22610843146645E-03,  0.00000000000000E+00,  1.22610843146645E-03,  6.37576384362556E+01,  1.41683640969457E-01], #7
           [1.90476190476191E-03,  3.09523809523809E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.00000000000000E-03,  2.60000000000000E+02,  5.77777777777778E-01], #8
           [5.27197746355514E-03,  0.00000000000000E+00,  0.00000000000000E+00,  2.04769464728438E-02,  0.00000000000000E+00,  2.57489239363990E-02,  1.33894404469275E+03,  2.97543121042833E+00], #9
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00], #10
           [0.00000000000000E+00,  9.40793185475018E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  9.40793185475018E-04,  4.89212456447010E+01,  1.08713879210447E-01], #11
           [0.00000000000000E+00,  1.81233586420538E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.81233586420538E-03,  9.42414649386799E+01,  2.09425477641511E-01], #12
           [0.00000000000000E+00,  1.14849671854544E-02,  0.00000000000000E+00,  0.00000000000000E+00 , 0.00000000000000E+00,  1.14849671854544E-02,  5.97218293643630E+02,  1.32715176365251E+00], #13
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00], #14
];

for j in range(len(D_ref)) :
    for i,ncmp in enumerate(COMP) :
        if (D_ref[j][i] == 0):
            TEST_RESU( RESU = _F( RESULTAT = RESUELS1,
                                  INST = j+1.0,
                                  NOM_CHAM = 'FERRAILLAGE',
                                  NOM_CMP = ncmp,
                                  GROUP_MA = 'M1',
                                  LEGENDE = 'ELS',
                                  VALE_REFE = D_ref[j][i],
                                  VALE_CALC = D_calc[j][i],
                                  REFERENCE = 'ANALYTIQUE',
                                  ORDRE_GRANDEUR = 1.e-3,
                                  CRITERE = 'ABSOLU'),);
        else: 
            TEST_RESU( RESU = _F( RESULTAT = RESUELS1,
                                  INST = j+1.0,
                                  NOM_CHAM = 'FERRAILLAGE',
                                  NOM_CMP = ncmp,
                                  GROUP_MA = 'M1',
                                  LEGENDE = 'ELS',
                                  VALE_REFE = D_ref[j][i],
                                  REFERENCE = 'ANALYTIQUE',
                                  PRECISION = 1e-4,
                                  VALE_CALC=D_calc[j][i]),);

# CAS 2 - calcul du ferraillage avec FERR_COMP = 'OUI':
#-------------------------------------------------------

RESUELS2 = CALC_FERRAILLAGE(RESULTAT = RESUELS, reuse = RESUELS,
                            CODIFICATION = 'EC2',
                            TYPE_COMB = 'ELS',
                            INST = (1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.),
                            AFFE = (_F( TOUT = 'OUI',
                                        TYPE_STRUCTURE = '1D',
                                        FERR_COMP = 'OUI',
                                        C_SUP_Y = 0.04,
                                        C_INF_Y = 0.04,
                                        C_SUP_Z = 0.04,
                                        C_INF_Z = 0.04,
                                        FCK = 35.e6,
                                        SIGS_ELS = 400.0e6,
                                        SIGC_INF_Y_ELS = 0.6*35.e6,
                                        SIGC_SUP_Y_ELS = 0.6*35.e6,
                                        SIGC_INF_Z_ELS = 0.6*35.e6,
                                        SIGC_SUP_Z_ELS = 0.6*35.e6,
                                        ALPHA_E = 15.,
                                        UNITE_CONTRAINTE = 'Pa',
                                        UNITE_DIMENSION = 'm',
                                        RHO_ACIER = 7800.),),);

COMP = ['AYI','AYS','AZI','AZS','AST','ATOT','DNSVOL','CONSTRUC'];
#-----------------------------------------------------
# Tests pour CAS 2
#-----------------------------------------------------
D_ref = [
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00042731994721662676,  0.00000000000000E+00,  11.110318627632296,  0.050623169746929715], #1
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.00042731994721662676,  2.50000000000000E-03,  141.11031862763232,  0.3395120586358187], #2
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  5.32506395762258E-04,  2.50000000000000E-03,  1.43845166289819E+02,  3.51973146573525E-01], #3
           [5.88764731062629E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.88764731062629E-04,  3.06157660152567E+01,  6.80350355894593E-02], #4
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.12366540980608E-03,  0.00000000000000E+00,  1.12366540980608E-03,  5.84306013099163E+01,  1.29845780688703E-01], #5
           [0.00000000000000E+00,  7.17105206758613E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  7.17105206758613E-04,  3.72894707514479E+01,  8.28654905587730E-02], #6
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.22610843146645E-03,  0.00000000000000E+00,  1.22610843146645E-03,  6.37576384362556E+01,  1.41683640969457E-01], #7
           [1.90476190476191E-03,  3.09523809523809E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.00000000000000E-03,  2.60000000000000E+02,  5.77777777777778E-01], #8
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00,  -1.00000000000000E+00, -1.00000000000000E+00], #9
           [0.00000000000000E+00, 0.0048873145748045705, 0.015659781655477992, 0.00000000000000E+00, 0.00000000000000E+00, 0.020547096230282565, 1068.4490039746934, 2.374331119943763], #10
           [0.00000000000000E+00,  9.40793185475018E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  9.40793185475018E-04,  4.89212456447010E+01,  1.08713879210447E-01], #11
           [9.72867808272731E-05,  1.65161868480726E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.74890546563453E-03,  9.09430842129955E+01,  2.02095742695546E-01], #12
           [1.23029170693565E-03,  2.36590439909297E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  3.59619610602862E-03,  1.87002197513488E+02,  4.15560438918863E-01], #13
           [0.00000000000000E+00,  5.41724786593350E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.0002415286658180934,  5.41724786593350E-03,  287.97663433981216,  0.6546061826740096], #14
];

D_calc = [
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00042731994721662676,  0.00000000000000E+00,  11.110318627632296,  0.050623169746929715], #1
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.00042731994721662676,  2.50000000000000E-03,  141.11031862763232,  0.3395120586358187], #2
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  5.32506395762258E-04,  2.50000000000000E-03,  1.43845166289819E+02,  3.51973146573525E-01], #3
           [5.88764731062629E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.88764731062629E-04,  3.06157660152567E+01,  6.80350355894593E-02], #4
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.12366540980608E-03,  0.00000000000000E+00,  1.12366540980608E-03,  5.84306013099163E+01,  1.29845780688703E-01], #5
           [0.00000000000000E+00,  7.17105206758613E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  7.17105206758613E-04,  3.72894707514479E+01,  8.28654905587730E-02], #6
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.22610843146645E-03,  0.00000000000000E+00,  1.22610843146645E-03,  6.37576384362556E+01,  1.41683640969457E-01], #7
           [1.90476190476191E-03,  3.09523809523809E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.00000000000000E-03,  2.60000000000000E+02,  5.77777777777778E-01], #8
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00,  -1.00000000000000E+00, -1.00000000000000E+00], #9
           [0.00000000000000E+00, 0.0048873145748045705, 0.015659781655477992, 0.00000000000000E+00, 0.00000000000000E+00, 0.020547096230282565, 1068.4490039746934, 2.374331119943763], #10
           [0.00000000000000E+00,  9.40793185475018E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  9.40793185475018E-04,  4.89212456447010E+01,  1.08713879210447E-01], #11
           [9.72867808272731E-05,  1.65161868480726E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.74890546563453E-03,  9.09430842129955E+01,  2.02095742695546E-01], #12
           [1.23029170693565E-03,  2.36590439909297E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  3.59619610602862E-03,  1.87002197513488E+02,  4.15560438918863E-01], #13
           [0.00000000000000E+00,  5.41724786593350E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.0002415286658180934,  5.41724786593350E-03,  287.97663433981216,  0.6546061826740096], #14
];

for j in range(len(D_ref)) :
    for i,ncmp in enumerate(COMP) :
        if (D_ref[j][i] == 0):
            TEST_RESU( RESU = _F( RESULTAT = RESUELS2,
                                  INST = j+1.0,
                                  NOM_CHAM = 'FERRAILLAGE',
                                  NOM_CMP = ncmp,
                                  GROUP_MA = 'M1',
                                  LEGENDE = 'ELS',
                                  VALE_REFE = D_ref[j][i],
                                  VALE_CALC = D_calc[j][i],
                                  REFERENCE = 'ANALYTIQUE',
                                  ORDRE_GRANDEUR = 1.e-3,
                                  CRITERE = 'ABSOLU'),);
        else: 
            TEST_RESU( RESU = _F( RESULTAT = RESUELS2,
                                  INST = j+1.0,
                                  NOM_CHAM = 'FERRAILLAGE',
                                  NOM_CMP = ncmp,
                                  GROUP_MA = 'M1',
                                  LEGENDE = 'ELS',
                                  VALE_REFE = D_ref[j][i],
                                  REFERENCE = 'ANALYTIQUE',
                                  PRECISION = 1e-4,
                                  VALE_CALC=D_calc[j][i]),);

# CAS 3 - calcul du ferraillage avec FERR_SYME = 'OUI':
#-------------------------------------------------------

RESUELS3 = CALC_FERRAILLAGE(RESULTAT = RESUELS, reuse = RESUELS,
                            CODIFICATION = 'EC2',
                            TYPE_COMB = 'ELS',
                            INST = (1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.),
                            AFFE = (_F( TOUT = 'OUI',
                                        TYPE_STRUCTURE = '1D',
                                        FERR_COMP = 'OUI',
                                        FERR_SYME = 'OUI',
                                        SEUIL_SYME = 5.e-4,
                                        C_SUP_Y = 0.04,
                                        C_INF_Y = 0.04,
                                        C_SUP_Z = 0.04,
                                        C_INF_Z = 0.04,
                                        FCK = 35.e6,
                                        SIGS_ELS = 400.0e6,
                                        SIGC_INF_Y_ELS = 0.6*35.e6,
                                        SIGC_SUP_Y_ELS = 0.6*35.e6,
                                        SIGC_INF_Z_ELS = 0.6*35.e6,
                                        SIGC_SUP_Z_ELS = 0.6*35.e6,
                                        ALPHA_E = 15.,
                                        UNITE_CONTRAINTE = 'Pa',
                                        UNITE_DIMENSION = 'm',
                                        RHO_ACIER = 7800.),),);

COMP = ['AYI','AYS','AZI','AZS','AST','ATOT','DNSVOL','CONSTRUC'];
#-----------------------------------------------------
# Tests pour CAS 3
#-----------------------------------------------------
D_ref = [
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00042731994721662676,  0.00000000000000E+00,  11.110318627632296,  0.050623169746929715], #1
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.00042731994721662676,  2.50000000000000E-03,  141.11031862763232,  0.3395120586358187], #2
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  5.32506395762258E-04,  2.50000000000000E-03,  1.43845166289819E+02,  3.51973146573525E-01], #3
           [6.01032778895596E-04,  1.96378004146698E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  7.97410783042294E-04,  4.14653607181993E+01,  9.21452460404428E-02], #4
           [0.00000000000000E+00,  0.00000000000000E+00,  6.94669199457258E-04,  1.10126363636364E-03,  0.00000000000000E+00,  1.79593283582089E-03,  9.33885074626865E+01,  2.07530016583748E-01], #5
           [3.92764550264550E-04,  7.18716931216931E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.11148148148148E-03,  5.77970370370370E+01,  1.28437860082304E-01], #6
           [0.00000000000000E+00,  0.00000000000000E+00,  7.65939510810584E-04,  1.22502411998776E-03,  0.00000000000000E+00,  1.99096363079834E-03,  1.03530108801514E+02,  2.30066908447808E-01], #7
           [2.62332477901340E-03,  3.09523809523809E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.71856287425150E-03,  2.97365269461078E+02,  6.60811709913506E-01], #8
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00,  -1.00000000000000E+00, -1.00000000000000E+00], #9
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00,  -1.00000000000000E+00, -1.00000000000000E+00], #10
           [4.52252650140557E-04,  9.11726950959488E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.36397960110004E-03,  7.09269392572023E+01,  1.57615420571561E-01], #11
           [1.10622826244642E-03,  1.59421448028674E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  2.70044274273316E-03,  1.40423022622124E+02,  3.12051161382498E-01], #12
           [1.86774710290756E-03,  2.33326020446597E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  4.20100730737353E-03,  2.18452379983423E+02,  4.85449733296496E-01], #13
           [6.16601838755304E-03,  6.54351728530893E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.0002415286658180934,  1.27095356728620E-02,  667.1756003000933,  1.4972705514746343], #14
];

D_calc = [
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00042731994721662676,  0.00000000000000E+00,  11.110318627632296,  0.050623169746929715], #1
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.00042731994721662676,  2.50000000000000E-03,  141.11031862763232,  0.3395120586358187], #2
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  5.32506395762258E-04,  2.50000000000000E-03,  1.43845166289819E+02,  3.51973146573525E-01], #3
           [6.01032778895596E-04,  1.96378004146698E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  7.97410783042294E-04,  4.14653607181993E+01,  9.21452460404428E-02], #4
           [0.00000000000000E+00,  0.00000000000000E+00,  6.94669199457258E-04,  1.10126363636364E-03,  0.00000000000000E+00,  1.79593283582089E-03,  9.33885074626865E+01,  2.07530016583748E-01], #5
           [3.92764550264550E-04,  7.18716931216931E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.11148148148148E-03,  5.77970370370370E+01,  1.28437860082304E-01], #6
           [0.00000000000000E+00,  0.00000000000000E+00,  7.65939510810584E-04,  1.22502411998776E-03,  0.00000000000000E+00,  1.99096363079834E-03,  1.03530108801514E+02,  2.30066908447808E-01], #7
           [2.62332477901340E-03,  3.09523809523809E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.71856287425150E-03,  2.97365269461078E+02,  6.60811709913506E-01], #8
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00,  -1.00000000000000E+00, -1.00000000000000E+00], #9
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00,  -1.00000000000000E+00, -1.00000000000000E+00], #10
           [4.52252650140557E-04,  9.11726950959488E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.36397960110004E-03,  7.09269392572023E+01,  1.57615420571561E-01], #11
           [1.10622826244642E-03,  1.59421448028674E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  2.70044274273316E-03,  1.40423022622124E+02,  3.12051161382498E-01], #12
           [1.86774710290756E-03,  2.33326020446597E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  4.20100730737353E-03,  2.18452379983423E+02,  4.85449733296496E-01], #13
           [6.16601838755304E-03,  6.54351728530893E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.0002415286658180934,  1.27095356728620E-02,  667.1756003000933,  1.4972705514746343], #14
];

for j in range(len(D_ref)) :
    for i,ncmp in enumerate(COMP) :
        if (D_ref[j][i] == 0):
            TEST_RESU( RESU = _F( RESULTAT = RESUELS3,
                                  INST = j+1.0,
                                  NOM_CHAM = 'FERRAILLAGE',
                                  NOM_CMP = ncmp,
                                  GROUP_MA = 'M1',
                                  LEGENDE = 'ELS',
                                  VALE_REFE = D_ref[j][i],
                                  VALE_CALC = D_calc[j][i],
                                  REFERENCE = 'ANALYTIQUE',
                                  ORDRE_GRANDEUR = 1.e-3,
                                  CRITERE = 'ABSOLU'),);
        else: 
            TEST_RESU( RESU = _F( RESULTAT = RESUELS3,
                                  INST = j+1.0,
                                  NOM_CHAM = 'FERRAILLAGE',
                                  NOM_CMP = ncmp,
                                  GROUP_MA = 'M1',
                                  LEGENDE = 'ELS',
                                  VALE_REFE = D_ref[j][i],
                                  REFERENCE = 'ANALYTIQUE',
                                  PRECISION = 1e-4,
                                  VALE_CALC=D_calc[j][i]),);

# CAS 4 - calcul du ferraillage avec CODIFICATION = 'BAEL91':
#------------------------------------------------------------

RESUELS4 = CALC_FERRAILLAGE(RESULTAT = RESUELS, reuse = RESUELS,
                            CODIFICATION = 'BAEL91',
                            TYPE_COMB = 'ELS',
                            INST = (1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.),
                            AFFE = (_F( TOUT = 'OUI',
                                        TYPE_STRUCTURE = '1D',
                                        C_SUP_Y = 0.04,
                                        C_INF_Y = 0.04,
                                        C_SUP_Z = 0.04,
                                        C_INF_Z = 0.04,
                                        FCJ = 35.e6,
                                        SIGS_ELS = 400.0e6,
                                        SIGC_INF_Y_ELS = 0.6*35.e6,
                                        SIGC_SUP_Y_ELS = 0.6*35.e6,
                                        SIGC_INF_Z_ELS = 0.6*35.e6,
                                        SIGC_SUP_Z_ELS = 0.6*35.e6,
                                        N = 15.,
                                        UNITE_CONTRAINTE = 'Pa',
                                        UNITE_DIMENSION = 'm',
                                        RHO_ACIER = 7800.),),);

COMP = ['AYI','AYS','AZI','AZS','AST','ATOT','DNSVOL','CONSTRUC'];
#-----------------------------------------------------
# Tests pour CAS 4
#-----------------------------------------------------
D_ref = [
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.0019230769230769232,  0.00000000000000E+00,  50.0,  0.22782051282051283], #1
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.0019230769230769232,  2.50000000000000E-03,  180.0,  0.5167094017094017], #2
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.0021597633136094677,  2.50000000000000E-03,  186.15384615384616,  0.5447488494411571], #3
           [5.88764731062629E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.88764731062629E-04,  3.06157660152567E+01,  6.80350355894593E-02], #4
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.12366540980608E-03,  0.00000000000000E+00,  1.12366540980608E-03,  5.84306013099163E+01,  1.29845780688703E-01], #5
           [0.00000000000000E+00,  7.17105206758613E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  7.17105206758613E-04,  3.72894707514479E+01,  8.28654905587730E-02], #6
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.22610843146645E-03,  0.00000000000000E+00,  1.22610843146645E-03,  6.37576384362556E+01,  1.41683640969457E-01], #7
           [1.90476190476191E-03,  3.09523809523809E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.00000000000000E-03,  2.60000000000000E+02,  5.77777777777778E-01], #8
           [5.27197746355514E-03,  0.00000000000000E+00,  0.00000000000000E+00,  2.04769464728438E-02,  0.00000000000000E+00,  2.57489239363990E-02,  1.33894404469275E+03,  2.97543121042833E+00], #9
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00], #10
           [0.00000000000000E+00,  9.40793185475018E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  9.40793185475018E-04,  4.89212456447010E+01,  1.08713879210447E-01], #11
           [0.00000000000000E+00,  1.81233586420538E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.81233586420538E-03,  9.42414649386799E+01,  2.09425477641511E-01], #12
           [0.00000000000000E+00,  1.14849671854544E-02,  0.00000000000000E+00,  0.00000000000000E+00 , 0.00000000000000E+00,  1.14849671854544E-02,  5.97218293643630E+02,  1.32715176365251E+00], #13
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00], #14
];

D_calc = [
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.0019230769230769232,  0.00000000000000E+00,  50.0,  0.22782051282051283], #1
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.0019230769230769232,  2.50000000000000E-03,  180.0,  0.5167094017094017], #2
           [6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  6.25000000000000E-04,  0.0021597633136094677,  2.50000000000000E-03,  186.15384615384616,  0.5447488494411571], #3
           [5.88764731062629E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.88764731062629E-04,  3.06157660152567E+01,  6.80350355894593E-02], #4
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.12366540980608E-03,  0.00000000000000E+00,  1.12366540980608E-03,  5.84306013099163E+01,  1.29845780688703E-01], #5
           [0.00000000000000E+00,  7.17105206758613E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  7.17105206758613E-04,  3.72894707514479E+01,  8.28654905587730E-02], #6
           [0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.22610843146645E-03,  0.00000000000000E+00,  1.22610843146645E-03,  6.37576384362556E+01,  1.41683640969457E-01], #7
           [1.90476190476191E-03,  3.09523809523809E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  5.00000000000000E-03,  2.60000000000000E+02,  5.77777777777778E-01], #8
           [5.27197746355514E-03,  0.00000000000000E+00,  0.00000000000000E+00,  2.04769464728438E-02,  0.00000000000000E+00,  2.57489239363990E-02,  1.33894404469275E+03,  2.97543121042833E+00], #9
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00], #10
           [0.00000000000000E+00,  9.40793185475018E-04,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  9.40793185475018E-04,  4.89212456447010E+01,  1.08713879210447E-01], #11
           [0.00000000000000E+00,  1.81233586420538E-03,  0.00000000000000E+00,  0.00000000000000E+00,  0.00000000000000E+00,  1.81233586420538E-03,  9.42414649386799E+01,  2.09425477641511E-01], #12
           [0.00000000000000E+00,  1.14849671854544E-02,  0.00000000000000E+00,  0.00000000000000E+00 , 0.00000000000000E+00,  1.14849671854544E-02,  5.97218293643630E+02,  1.32715176365251E+00], #13
           [-1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00, -1.00000000000000E+00], #14
];

for j in range(len(D_ref)) :
    for i,ncmp in enumerate(COMP) :
        if (D_ref[j][i] == 0):
            TEST_RESU( RESU = _F( RESULTAT = RESUELS4,
                                  INST = j+1.0,
                                  NOM_CHAM = 'FERRAILLAGE',
                                  NOM_CMP = ncmp,
                                  GROUP_MA = 'M1',
                                  LEGENDE = 'ELS',
                                  VALE_REFE = D_ref[j][i],
                                  VALE_CALC = D_calc[j][i],
                                  REFERENCE = 'ANALYTIQUE',
                                  ORDRE_GRANDEUR = 1.e-3,
                                  CRITERE = 'ABSOLU'),);
        else: 
            TEST_RESU( RESU = _F( RESULTAT = RESUELS4,
                                  INST = j+1.0,
                                  NOM_CHAM = 'FERRAILLAGE',
                                  NOM_CMP = ncmp,
                                  GROUP_MA = 'M1',
                                  LEGENDE = 'ELS',
                                  VALE_REFE = D_ref[j][i],
                                  REFERENCE = 'ANALYTIQUE',
                                  PRECISION = 1e-4,
                                  VALE_CALC=D_calc[j][i]),);

FIN()
