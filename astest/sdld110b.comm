# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2021 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#       ON MODELISE UNE BARRE AVEC 1 ELEMENTS DISCRET 2D
#       A 2 NOEUDS
#       ON EXERCE UNE FORCE SINUSOIDALE A UNE EXTREMITE
#       LE PROBLEME EST SUR BASE MODALE
###################################################################
#                     ATTENTION
#                    ***********
# CE TEST SERT À DE LA VERIFICATION! IL N'ILLUSTRE PAS LE BON
# USAGE DE LA MODÉLISATION SUR BASE MODALE
###################################################################
import numpy as np

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'), DEBUG=_F(SDVERI='OUI'))


MA = LIRE_MAILLAGE(FORMAT="ASTER", )
MA = CREA_MAILLAGE(MAILLAGE=MA,
                   CREA_POI1=(_F(NOM_GROUP_MA='P',
                                 GROUP_NO='P',),))

MOD = AFFE_MODELE(MAILLAGE=MA,
                  AFFE=(_F(GROUP_MA=('GRMA', 'P'),
                           MODELISATION='2D_DIS_T',
                           PHENOMENE='MECANIQUE'))
                  )

CARA_ELE = AFFE_CARA_ELEM(MODELE=MOD,
                          VERIF=('MAILLE', ),
                          DISCRET_2D=(_F(GROUP_MA='S2',
                                         CARA='K_T_D_L',
                                         VALE=(1., 1.,),),
                                      _F(GROUP_MA='P',
                                         CARA='M_T_D_N',
                                         VALE=1.,),
                                      ),
                          )

tmax = 9
npas = 90*4

SIN = FORMULE(VALE='sin(2*INST)',
              NOM_PARA='INST', tmax=tmax, npas=npas)

L_INST = DEFI_LIST_REEL(DEBUT=0.0,
                        INTERVALLE=(_F(JUSQU_A=tmax,
                                       NOMBRE=npas,),),)

# Ce qui suit sert à définir un problème bidon - on n'utilise que les structures de données
# produites mais on les remplit "à la main" dans un but de vérification
# ===========================================================================================
ASSEMBLAGE(MODELE=MOD,
           CARA_ELEM=CARA_ELE,
           NUME_DDL=CO('NUMEDDL'),
           MATR_ASSE=(_F(MATRICE=CO('RIGIDITE'),
                         OPTION='RIGI_MECA',),
                      _F(MATRICE=CO('MASSE'),
                         OPTION='MASS_MECA',),),)


P2X = CREA_CHAMP(OPERATION='AFFE', TYPE_CHAM='NOEU_DEPL_R', MAILLAGE=MA,
                 AFFE=_F(GROUP_NO='P2', NOM_CMP=('DX',), VALE=(1.,)),
                 NUME_DDL=NUMEDDL, PROL_ZERO='OUI')
P2Y = CREA_CHAMP(OPERATION='AFFE', TYPE_CHAM='NOEU_DEPL_R', MAILLAGE=MA,
                 AFFE=_F(GROUP_NO='P2', NOM_CMP=('DY',), VALE=(1.,)),
                 NUME_DDL=NUMEDDL, PROL_ZERO='OUI')
P3X = CREA_CHAMP(OPERATION='AFFE', TYPE_CHAM='NOEU_DEPL_R', MAILLAGE=MA,
                 AFFE=_F(GROUP_NO='P3', NOM_CMP=('DX',), VALE=(1.,)),
                 NUME_DDL=NUMEDDL, PROL_ZERO='OUI')
P3Y = CREA_CHAMP(OPERATION='AFFE', TYPE_CHAM='NOEU_DEPL_R', MAILLAGE=MA,
                 AFFE=_F(GROUP_NO='P3', NOM_CMP=('DY',), VALE=(1.,)),
                 NUME_DDL=NUMEDDL, PROL_ZERO='OUI')

MODES = CREA_RESU(OPERATION='AFFE', TYPE_RESU='MODE_MECA', NOM_CHAM='DEPL',
                  AFFE=(_F(CHAM_GD=P2X, NUME_MODE=3),
                        _F(CHAM_GD=P2Y, NUME_MODE=4),
                        _F(CHAM_GD=P3X, NUME_MODE=5),
                        _F(CHAM_GD=P3Y, NUME_MODE=6),
                        ), )

NUMEG = NUME_DDL_GENE(BASE=MODES,
                      STOCKAGE='PLEIN',)
VECAS = CREA_CHAMP(OPERATION='AFFE', TYPE_CHAM='NOEU_DEPL_R', MAILLAGE=MA,
                   AFFE=_F(GROUP_NO='P3', NOM_CMP=('DY',), VALE=(1.,)),
                   NUME_DDL=NUMEDDL, PROL_ZERO='OUI')

PROJ_BASE(BASE=MODES,
          STOCKAGE='PLEIN',
          MATR_ASSE_GENE=(_F(MATRICE=CO("MASSEGEN"),
                             MATR_ASSE=MASSE),
                          _F(MATRICE=CO("RIGIDGEN"),
                             MATR_ASSE=RIGIDITE)),
          VECT_ASSE_GENE=_F(VECTEUR=CO("VECT_X"), VECT_ASSE=VECAS,
                            TYPE_VECT='DEPL'),
          NUME_DDL_GENE=NUMEG,
          )
# ===========================================================================================

# On définit ici les matrices et le vecteur nécessaires pour le test

# Vecteur second membre (force appliquée)
VECT_X.RECU_VECT_GENE_C(-np.array([-10000000., 0., 0., 0.]))

# Matrice de rigidité
RIGIDGEN.RECU_MATR_GENE(np.array([[1.0000001e+07,  0., -1.,  0.],
                                  [0.,  1.0000001e+07, 0., -1.],
                                  [-1.,  0., 1.,  0.],
                                  [0., -1., 0.,  1.]]))

# Matrice de masse
MASSEGEN.RECU_MATR_GENE(np.diag(np.ones(4)))

GENE = DYNA_VIBRA(TYPE_CALCUL='TRAN', BASE_CALCUL='GENE',
                  MATR_MASS=MASSEGEN,
                  MATR_RIGI=RIGIDGEN,
                  INCREMENT=_F(LIST_INST=L_INST,),
                  SCHEMA_TEMPS=_F(SCHEMA='TRBDF2'),
                  EXCIT=(_F(VECT_ASSE_GENE=VECT_X,
                            FONC_MULT=SIN,),
                         ),)

DP3 = RECU_FONCTION(RESU_GENE=GENE,
                    NOM_CHAM='DEPL',
                    NOM_CMP='DX',
                    GROUP_NO='P3',
                    )
VP3 = RECU_FONCTION(RESU_GENE=GENE,
                    NOM_CHAM='VITE',
                    NOM_CMP='DX',
                    GROUP_NO='P3',
                    )

AP3 = RECU_FONCTION(RESU_GENE=GENE,
                    NOM_CHAM='ACCE',
                    NOM_CMP='DX',
                    GROUP_NO='P3',
                    )


foncDX = FORMULE(VALE='1./3 *(2 * sin(INST) - sin(2*INST))', NOM_PARA='INST',)
REFDX = CALC_FONC_INTERP(FONCTION=foncDX,
                         NOM_RESU='DEPL',
                         LIST_PARA=L_INST,
                         NOM_PARA='INST',)

foncVX = FORMULE(VALE='1./3 *(2 * cos(INST) - 2*cos(2*INST))', NOM_PARA='INST',)
REFVX = CALC_FONC_INTERP(FONCTION=foncVX,
                         NOM_RESU='DEPL',
                         LIST_PARA=L_INST,
                         NOM_PARA='INST',)

foncAX = FORMULE(VALE='1./3 *(-2 * sin(INST) + 4*sin(2*INST))', NOM_PARA='INST',)
REFAX = CALC_FONC_INTERP(FONCTION=foncAX,
                         NOM_RESU='DEPL',
                         LIST_PARA=L_INST,
                         NOM_PARA='INST',)


IMPR_FONCTION(FORMAT='XMGRACE',  # PILOTE='INTERACTIF',
              UNITE=29,
              COURBE=(_F(FONCTION=DP3, LEGENDE='Calc', FREQ_MARQUEUR=0,),
                      _F(FONCTION=REFDX, LEGENDE='Ref', FREQ_MARQUEUR=1.E8,),),
              LEGENDE_X='Time',
              LEGENDE_Y='Displ',)

IMPR_FONCTION(FORMAT='XMGRACE',  # PILOTE='INTERACTIF',
              UNITE=29,
              COURBE=(_F(FONCTION=VP3, LEGENDE='Calc', FREQ_MARQUEUR=0,),
                      _F(FONCTION=REFVX, LEGENDE='Ref', FREQ_MARQUEUR=1.E8,),),
              LEGENDE_X='Time',
              LEGENDE_Y='Velocity',)

IMPR_FONCTION(FORMAT='XMGRACE',  # PILOTE='INTERACTIF',
              UNITE=29,
              COURBE=(_F(FONCTION=AP3, LEGENDE='Calc', FREQ_MARQUEUR=0,),
                      _F(FONCTION=REFAX, LEGENDE='Ref', FREQ_MARQUEUR=1.E8,),),
              LEGENDE_X='Time',
              LEGENDE_Y='acceleration',)

# ==============================================================================
# Tests

# DEPL
formDX = FORMULE(VALE='abs(DP3(INST)-REFDX(INST))', NOM_PARA='INST', DP3=DP3, REFDX=REFDX)
diffDX = CALC_FONC_INTERP(FONCTION=formDX,
                          NOM_RESU='DEPL',
                          LIST_PARA=L_INST,
                          NOM_PARA='INST',)
maxDX = INFO_FONCTION(MAX=_F(FONCTION=diffDX))
TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_REFE=0.0E+00,
           VALE_CALC=0.00021795427367399256,
           NOM_PARA='DEPL',
           TYPE_TEST='SOMM_ABS',
           TABLE=maxDX,)

# VITE
formVX = FORMULE(VALE='abs(VP3(INST)-REFVX(INST))', NOM_PARA='INST', VP3=VP3, REFVX=REFVX)
diffVX = CALC_FONC_INTERP(FONCTION=formVX,
                          NOM_RESU='VITE',
                          LIST_PARA=L_INST,
                          NOM_PARA='INST',)
maxVX = INFO_FONCTION(MAX=_F(FONCTION=diffVX))
TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_REFE=0.0E+00,
           VALE_CALC=0.00023899780637193224,
           NOM_PARA='VITE',
           TYPE_TEST='SOMM_ABS',
           TABLE=maxVX,)

# ACCE
formAX = FORMULE(VALE='abs(AP3(INST)-REFAX(INST))', NOM_PARA='INST', AP3=AP3, REFAX=REFAX)
diffAX = CALC_FONC_INTERP(FONCTION=formAX,
                          NOM_RESU='VITE',
                          LIST_PARA=L_INST,
                          NOM_PARA='INST',)
maxAX = INFO_FONCTION(MAX=_F(FONCTION=diffAX))
TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_REFE=0.0E+00,
           PRECISION=0.0011,
           VALE_CALC=0.0002177432283503311,
           NOM_PARA='VITE',
           TYPE_TEST='SOMM_ABS',
           TABLE=maxAX,)


FIN()
