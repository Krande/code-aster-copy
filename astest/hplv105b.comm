# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2022 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os
import json
import tempfile
import os.path as osp

import code_aster
from code_aster.Commands import *
from code_aster.Utilities import ExecutionParameter

DEBUT(CODE=_F(NIV_PUB_WEB='INTRANET'))

testname = 'hplv105b'

datadir = osp.join(ExecutionParameter().get_option('rcdir'), 'tests_data')
meshfile = osp.join(datadir, '%s.med'%testname)
with open(osp.join(datadir, '%s.json'%testname)) as f:
    testresu = json.load(f)

MA = code_aster.Mesh()
MA.readMedFile(meshfile)

INCONEL = INCLUDE_MATERIAU(NOM_AFNOR='NC15FE',
                           TYPE_MODELE='REF',
                           VARIANTE='A',
                           TYPE_VALE='NOMI',
                           UNITE_LONGUEUR='MM',
                           PROL_GAUCHE='EXCLU',
                           PROL_DROITE='CONSTANT',
                           INFO=1)

ACIER = INCLUDE_MATERIAU(NOM_AFNOR='16MND5',
                         TYPE_MODELE='REF',
                         VARIANTE='A',
                         TYPE_VALE='NOMI',
                         UNITE_LONGUEUR='MM',
                         PROL_GAUCHE='EXCLU',
                         PROL_DROITE='CONSTANT',
                         INFO=1)

TAB_HOMO = CALC_MATE_HOMO(MAILLAGE=MA,
                          AFFE=(_F(GROUP_MA=('plaque',),
                                   MATER=ACIER),
                                _F(GROUP_MA=('tube1',),
                                   MATER=INCONEL)),
                          VARC=_F(NOM_VARC='TEMP',
                                  VALE=(20,50)),
                          TYPE_HOMO='MASSIF',
                          UNITE=80)

for temp, data in testresu.items():
    for para, value in data.items():
        TEST_TABLE(TABLE=TAB_HOMO,
                   NOM_PARA=para,
                   VALE_CALC=value,
                   FILTRE=_F(NOM_PARA='TEMP',
                             VALE=float(temp)))

tab_values = {para : items for para, items in TAB_HOMO.EXTR_TABLE().values().items()
              if all(abs(i)>1.E-12 for i in items)}

vale_calc = {temp : {para : item[i]
                     for para, item in tab_values.items()}
             for i, temp in enumerate(tab_values['TEMP'])}

tmpdir = tempfile.mkdtemp()
with open(osp.join(tmpdir, '%s.json'%testname), 'w') as f:
    json.dump(vale_calc, f, indent=1, sort_keys=True)

FIN()
