# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *
from code_aster import CA


DEBUT(CODE=_F(NIV_PUB_WEB="INTERNET"), IGNORE_ALARM="MODELISA4_6", DEBUG=_F(SDVERI="OUI"))

# ###################################################
# ###################################################
#
# Utilisation d'un maillage lineaire pour tester la
# coherence entre les modelisations suivantes :
#
#  - MECANIQUE / 3D
#  - MECANIQUE / 3D / avec contact
#  - THERMIQUE / 3D
#  - MECANIQUE / 3D_HM
#  - MECANIQUE / 3D_HM / avec contact
#
# ###################################################
# ###################################################

# ###################################################
# Raffinement avec homard -> creation de PYRAM5
# ###################################################

MA0 = LIRE_MAILLAGE(FORMAT="MED")

MODBID = AFFE_MODELE(MAILLAGE=MA0, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="3D"))

LN = FORMULE(VALE="Z+0.125", NOM_PARA=["X", "Y", "Z"])

FISBID = DEFI_FISS_XFEM(MAILLAGE=MA0, TYPE_DISCONTINUITE="INTERFACE", DEFI_FISS=_F(FONC_LN=LN))

CHERR = RAFF_XFEM(FISSURE=FISBID)

MA1 = CO("MA1")

MACR_ADAP_MAIL(
    ADAPTATION="RAFFINEMENT",
    CHAM_GD=CHERR,
    CRIT_RAFF_PE=0.05,
    USAGE_CMP="RELATIF",
    MAILLAGE_N=MA0,
    MAILLAGE_NP1=MA1,
)

MAILLALI = CREA_MAILLAGE(
    MAILLAGE=MA1,
    CREA_POI1=(
        _F(NOM_GROUP_MA="POCOUPE1", GROUP_NO="NORPHHAU"),
        _F(NOM_GROUP_MA="POCOUPE2", GROUP_NO="NORPHBAS"),
    ),
)

# ###################################################
# Definition des modeles sains
# ###################################################

# MLMES : Modele Lineaire MEcanique Sain
MLMES = AFFE_MODELE(
    MAILLAGE=MAILLALI,
    AFFE=(
        _F(
            GROUP_MA=("VOLUME", "FACE", "EDGE"),
            # _F(GROUP_MA = ('VOLUME','FACE',),
            # _F(GROUP_MA = ('VOLUME',),
            PHENOMENE="MECANIQUE",
            MODELISATION="3D",
        ),
        _F(GROUP_MA=("POCOUPE1", "POCOUPE2"), PHENOMENE="MECANIQUE", MODELISATION="DIS_TR"),
    ),
)

# MLTHS : Modele Lineaire THermique Sain
MLTHS = AFFE_MODELE(
    MAILLAGE=MAILLALI,
    AFFE=_F(GROUP_MA=("VOLUME", "FACE"), PHENOMENE="THERMIQUE", MODELISATION="3D"),
)

# ###################################################
# Definition des fissure et interface
# ###################################################

D = 1.0
cent = D / 2
a = 0.57
b = 0.57

FISSLI = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(
        FORM_FISS="ELLIPSE",
        DEMI_GRAND_AXE=a,  # suivant x ellipse
        DEMI_PETIT_AXE=b,  # suivant y ellipse
        CENTRE=(cent, 0.0, 0.0),
        VECT_X=(0.1, 0.0, 0.0),
        VECT_Y=(0.0, 1.0, 0.0),
    ),
)

LNHAUT = FORMULE(VALE="Z-0.5", NOM_PARA=["X", "Y", "Z"])

INTELI = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI, TYPE_DISCONTINUITE="INTERFACE", DEFI_FISS=_F(FONC_LN=LNHAUT)
)

# ###################################################
# Definition des modeles enrichis
# ###################################################

# MLMEX  : Modele Lineaire MEcanique Xfem
MLMEX = MODI_MODELE_XFEM(MODELE_IN=MLMES, FISSURE=(FISSLI, INTELI))

# MLMEXC : Modele Lineaire MEcanique Xfem Contact
MLMEXC = MODI_MODELE_XFEM(MODELE_IN=MLMES, FISSURE=(FISSLI, INTELI), CONTACT="STANDARD")

# MLTHX  : Modele Lineaire THermique Xfem
MLTHX = MODI_MODELE_XFEM(MODELE_IN=MLTHS, FISSURE=(FISSLI, INTELI))

# ###################################################
# Impression du contenu des modeles xfem obtenus :
# -> meca, avec mot-cle FISSURE     : MODMEX1
# -> meca, avec mot-cle MODELE_THER : MODMEX2
# -> ther, avec mot-cle FISSURE     : MODTHX1
#
# "Post-traitements" des fichiers obtenus avec IMPR_CO

# On veut comparer que les objets issus de MODI_MODELE_XFEM sont semblables.
# On filtre les lignes fournies par UTIMSD contenant des valeurs (.VALE/.CELV).
# On compare la somme de contr√¥le (SOMMI ou SOMMR).


def getVALE(model, filter, debug=False):
    """Extract relevant lines from UTIMSD about values."""
    from code_aster.Helpers import LogicalUnitFile

    tmpfile = LogicalUnitFile.new_free()
    IMPR_CO(CONCEPT=_F(NOM=model), NIVEAU=-1, UNITE=tmpfile.unit, PERMUTATION="NON")

    with open(tmpfile.filename, "r") as fsd:
        lines = fsd.readlines()
        vale = []
        for line in lines:
            line = line.replace(model.getName(), "obj_name")
            spl = line.split("|")
            if len(spl) < 2:
                continue
            if filter(spl[1]):
                vale.append(spl[1] + " | " + spl[-1])
    if debug:
        print(">>>", model.userName, "<<<")
        print("".join(vale))
    return vale


func_test = lambda txt: "TOPO" in txt and ".CELV" in txt

valMEX = getVALE(MLMEX, func_test, debug=True)
valMEXC = getVALE(MLMEXC, func_test, debug=True)
valTHX = getVALE(MLTHX, func_test, debug=True)

test = CA.TestCase()

test.assertEqual(len(valMEX), len(valMEXC), msg="size of valMEX/valMEXC")
test.assertEqual(len(valMEX), len(valTHX), msg="size of valMEX/valTHX")

test.assertSequenceEqual(valMEX, valMEXC, msg="valMEX vs valMEXC")
test.assertSequenceEqual(valMEX, valTHX, msg="valMEX vs valTHX")


# ###################################################
# ###################################################
#
# Utilisation d'un maillage quadratique pour tester la
# coherence entre les modelisations suivantes :
#
#  - MECANIQUE / 3D
#  - MECANIQUE / 3D_HM
#
# Rq :
#
# -> pour la definition du modele sain HM, il n'existe
#    pas d'elements PYRAM13 HM. On travaille donc sur le
#    maillage initial avant raffinement HOMARD, en
#    contrepartie le maillage ne contient pas de TETRA10.
# -> pour la definition du modele enrichi HM, il n'existe
#    pas d'elements cracktip. On travaille donc uniquement
#    avec une interface
#
# ###################################################
# ###################################################

MAILLAQU = CREA_MAILLAGE(MAILLAGE=MA0, LINE_QUAD=_F(TOUT="OUI"))

# ################################################################
# Definition des modeles sains
# ################################################################

# MQMES : Modele Quadratique MEcanique Sain
MQMES = AFFE_MODELE(
    MAILLAGE=MAILLAQU,
    AFFE=_F(GROUP_MA=("VOLUME", "FACE"), PHENOMENE="MECANIQUE", MODELISATION="3D"),
)

# MQHMS : Modele Quadratique Hydro-Mecanique Sain
MQHMS = AFFE_MODELE(
    MAILLAGE=MAILLAQU,
    AFFE=_F(GROUP_MA=("VOLUME", "FACE"), PHENOMENE="MECANIQUE", MODELISATION="3D_HM"),
)

# ###################################################
# Definition de l'interface
# ###################################################

INTEQU = DEFI_FISS_XFEM(
    MAILLAGE=MAILLAQU, TYPE_DISCONTINUITE="INTERFACE", DEFI_FISS=_F(FONC_LN=LNHAUT)
)

# ###################################################
# Definition des modeles enrichis
# ###################################################

# MQMEX : Modele Quadratique MEcanique Xfem
MQMEX = MODI_MODELE_XFEM(MODELE_IN=MQMES, FISSURE=INTEQU)

# MQHMX : Modele Quadratique Hydro-Mecanique Xfem
MQHMX = MODI_MODELE_XFEM(MODELE_IN=MQHMS, FISSURE=INTEQU)

# MQHMX : Modele Quadratique Hydro-Mecanique Xfem avec contact
MQHMXC = MODI_MODELE_XFEM(MODELE_IN=MQHMS, FISSURE=INTEQU, CONTACT="STANDARD")


valQMEX = getVALE(MQMEX, func_test, debug=True)
valQHMX = getVALE(MQHMX, func_test, debug=True)
valQHMXC = getVALE(MQHMXC, func_test, debug=True)

test.assertEqual(len(valQMEX), len(valQHMX), msg="size of valQMEX/valQHMX")
test.assertEqual(len(valQMEX), len(valQHMXC), msg="size of valQMEX/valTHX")

test.assertSequenceEqual(valQMEX, valQHMX, msg="valQMEX vs valQHMX")
test.assertSequenceEqual(valQMEX, valQHMXC, msg="valQMEX vs valTHX")

test.printSummary()

FIN()
