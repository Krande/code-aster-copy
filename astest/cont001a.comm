# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2021 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
import code_aster


DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',),
      # DEBUG=_F(SDVERI='OUI',),
      INFO=1,)

test = code_aster.TestCase()


Mail = LIRE_MAILLAGE(UNITE=20,
                     FORMAT='MED',)

Mail = MODI_MAILLAGE(reuse=Mail,
                     MAILLAGE=Mail,
                     ORIE_PEAU=_F(GROUP_MA_PEAU=('Group_2', 'Group_1', 'Group_3', 'Group_4',),),)


MODI = AFFE_MODELE(MAILLAGE=Mail,
                   AFFE=_F(TOUT='OUI',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='D_PLAN',),)


DEFICO = DEFI_CONT(MODELE=MODI,
                   INFO=2,
                   LISSAGE='OUI',
                   ZONE=(_F(APPARIEMENT='MORTAR',
                            GROUP_MA_MAIT='Group_2',
                            GROUP_MA_ESCL='Group_1',
                            ALGO_CONT='LAGRANGIEN',
                            VARIANTE='ROBUSTE',
                            CONTACT_INIT='OUI',),
                         _F(APPARIEMENT='MORTAR',
                            GROUP_MA_MAIT='Group_4',
                            GROUP_MA_ESCL='Group_3',
                            VARIANTE = "RAPIDE",
                            ALGO_CONT='NITSCHE',
                            CONTACT_INIT='INTERPENETRE',)),)


test.assertEqual(DEFICO.getNumberOfContactZones(), 2)
test.assertEqual(DEFICO.getVerbosity(), 2)
test.assertEqual(DEFICO.getModel().getName(), MODI.getName())
test.assertFalse(DEFICO.hasFriction())
test.assertTrue(DEFICO.hasSmoothing())

algo_cont = [code_aster.ContactAlgo.Lagrangian, code_aster.ContactAlgo.Nitsche]
vari_cont = [code_aster.ContactVariant.Robust, code_aster.ContactVariant.Rapide]

for i in range(DEFICO.getNumberOfContactZones()):
    zone = DEFICO.getContactZone(i)
    test.assertEqual(zone.getVerbosity(), 2)
    test.assertTrue(zone.checkNormals())
    test.assertEqual(zone.getModel().getName(), MODI.getName())

    contParam = zone.getContactParameter()
    test.assertEqual(contParam.getAlgorithm(), algo_cont[i])
    test.assertEqual(contParam.getType(), code_aster.ContactType.Unilateral)
    test.assertEqual(contParam.getVariant(), vari_cont[i])
    test.assertEqual(contParam.getCoefficient(), 100.)

    fricParam = zone.getFrictionParameter()  # None
    pairParam = zone.getPairingParameter()
    # test.assertEqual(pairParam.getType(), code_aster.PairingAlgo.Mortar)


DEFICO2 = DEFI_CONT(MODELE=MODI,
                    INFO=2,
                    FROTTEMENT='OUI',
                    LISSAGE='NON',
                    ZONE=_F(ALGO_CONT='NITSCHE',
                            VARIANTE='RAPIDE',
                            VERI_NORM='NON',
                            SYME='OUI',
                            COEF_CONT=312.,
                            TYPE_CONT='BILATERAL',
                            APPARIEMENT='MORTAR',
                            DIST_APPA=-1,
                            GROUP_MA_MAIT='Group_2',
                            GROUP_MA_ESCL='Group_1',
                            CONTACT_INIT='INTERPENETRE',
                            ALGO_FROT='NITSCHE',
                            TYPE_FROT='COULOMB',
                            COULOMB=100.,
                            ),)


test.assertEqual(DEFICO2.getNumberOfContactZones(), 1)
test.assertEqual(DEFICO2.getVerbosity(), 2)
test.assertEqual(DEFICO2.getModel().getName(), MODI.getName())
test.assertTrue(DEFICO2.hasFriction())
test.assertFalse(DEFICO2.hasSmoothing())

for i in range(DEFICO2.getNumberOfContactZones()):
    zone = DEFICO2.getContactZone(i)
    test.assertEqual(zone.getVerbosity(), 2)
    test.assertEqual(zone.getSlaveGroupOfCells(), 'Group_1')
    test.assertEqual(zone.getMasterGroupOfCells(), 'Group_2')
    test.assertEqual(zone.getModel().getName(), MODI.getName())
    test.assertFalse(zone.checkNormals())
    contParam = zone.getContactParameter()
    test.assertEqual(contParam.getAlgorithm(), code_aster.ContactAlgo.Nitsche)
    test.assertEqual(contParam.getType(), code_aster.ContactType.Bilateral)
    test.assertEqual(contParam.getVariant(), code_aster.ContactVariant.Rapide)
    test.assertEqual(contParam.getCoefficient(), 312.)
    fricParam = zone.getFrictionParameter()  
    test.assertTrue(fricParam.hasFriction())


DEFICO3 = DEFI_CONT(MODELE=MODI,
                    INFO=2,
                    FROTTEMENT='OUI',
                    LISSAGE='NON',
                    ZONE=_F(ALGO_CONT='NITSCHE',
                            VERI_NORM='NON',
                            COEF_CONT=312.,
                            TYPE_CONT='BILATERAL',
                            APPARIEMENT='MORTAR',
                            DIST_APPA=-1,
                            GROUP_MA_MAIT='Group_2',
                            GROUP_MA_ESCL='Group_1',
                            CONTACT_INIT='INTERPENETRE',
                            #ALGO_FROT='NITSCHE',
                            #TYPE_FROT='COULOMB',
                            #COULOMB=100.,
                            ),)


test.assertEqual(DEFICO3.getNumberOfContactZones(), 1)
test.assertEqual(DEFICO3.getVerbosity(), 2)
test.assertEqual(DEFICO3.getModel().getName(), MODI.getName())
test.assertTrue(DEFICO3.hasFriction())
test.assertFalse(DEFICO3.hasSmoothing())

for i in range(DEFICO3.getNumberOfContactZones()):
    zone = DEFICO3.getContactZone(i)
    test.assertEqual(zone.getVerbosity(), 2)
    test.assertEqual(zone.getSlaveGroupOfCells(), 'Group_1')
    test.assertEqual(zone.getMasterGroupOfCells(), 'Group_2')
    test.assertEqual(zone.getModel().getName(), MODI.getName())
    test.assertFalse(zone.checkNormals())
    contParam = zone.getContactParameter()
    test.assertEqual(contParam.getAlgorithm(), code_aster.ContactAlgo.Nitsche)
    test.assertEqual(contParam.getType(), code_aster.ContactType.Bilateral)
    test.assertEqual(contParam.getCoefficient(), 312.)
    fricParam = zone.getFrictionParameter()  
    test.assertTrue(fricParam.hasFriction())
    test.assertEqual(fricParam.getAlgorithm(), code_aster.FrictionAlgo.Nitsche)
    test.assertEqual(fricParam.getType(), code_aster.FrictionType.Without)
    print(fricParam.getTresca())        # vide, valeur hasard, ex. 6.9214098795144e-310
    print(fricParam.getCoulomb())       # vide, valeur hasard, ex. 2.37e-322

DEFICO4 = DEFI_CONT(MODELE=MODI,
                    INFO=2,
                    FROTTEMENT='OUI',
                    LISSAGE='NON',
                    ZONE=_F(ALGO_CONT='NITSCHE',
                            VERI_NORM='NON',
                            COEF_CONT=312.,
                            TYPE_CONT='BILATERAL',
                            APPARIEMENT='MORTAR',
                            DIST_APPA=-1,
                            GROUP_MA_MAIT='Group_2',
                            GROUP_MA_ESCL='Group_1',
                            CONTACT_INIT='INTERPENETRE',
                            #ALGO_FROT='NITSCHE',
                            TYPE_FROT='COULOMB',
                            COULOMB=200.,
                            ),)

for i in range(DEFICO4.getNumberOfContactZones()):
    zone = DEFICO4.getContactZone(i)
    contParam = zone.getContactParameter()
    fricParam = zone.getFrictionParameter()  
    test.assertTrue(fricParam.hasFriction())
    test.assertEqual(fricParam.getAlgorithm(), code_aster.FrictionAlgo.Nitsche)
    test.assertEqual(fricParam.getType(), code_aster.FrictionType.Coulomb)
    print(fricParam.getTresca()) # vide, valeur par defaut : 6.9214098795144e-310
    test.assertEqual(fricParam.getCoulomb(), 200.)

FIN()
