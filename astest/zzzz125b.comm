# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2022 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'), DEBUG=_F(SDVERI='OUI'))

MAIL = LIRE_MAILLAGE()

# construction de la variable de commande TEMP à partir de la table
# ===

TABLE_TEMP = LIRE_TABLE(UNITE = 30)
temp_values = TABLE_TEMP.EXTR_TABLE().values()
inst = temp_values["INST"]
temp = temp_values["TEMP"]

affe = []
for i, t in zip(inst, temp):
    champ = CREA_CHAMP(TYPE_CHAM='NOEU_TEMP_R',
                                  OPERATION='AFFE',
                                  MAILLAGE=MAIL,
                                  AFFE=_F(TOUT="OUI",
                                          NOM_CMP="TEMP",
                                          VALE=t)
                        )
    affe.append({"CHAM_GD": champ, "INST": i})

TEMP2=CREA_RESU(OPERATION='AFFE',
                 TYPE_RESU='EVOL_THER',
                 NOM_CHAM='TEMP',
                 AFFE=affe)

# construction d'un résultat mécanique bidon contenant les bon matériaux et la variable de commande TEMP
# ===

MO_MECA = AFFE_MODELE (
        MAILLAGE = MAIL,
        AFFE     =_F ( GROUP_MA     = ('M', ),
                       PHENOMENE    = 'MECANIQUE',
                       MODELISATION = '3D' )
                      )

YOUNGMET = DEFI_FONCTION(NOM_PARA    = 'TEMP',
                        VALE = (
                                0.00000E+00, 2.05000E+11,
                                2.00000E+01, 2.04000E+11,
                                5.00000E+01, 2.03000E+11,
                                1.00000E+02, 2.00000E+11,
                                1.50000E+02, 1.97000E+11,
                                2.00000E+02, 1.93000E+11,
                                2.50000E+02, 1.89000E+11,
                                3.00000E+02, 1.85000E+11,
                                3.50000E+02, 1.80000E+11),
                        PROL_DROITE = 'LINEAIRE',
                        PROL_GAUCHE = 'LINEAIRE')

NUMET = DEFI_CONSTANTE ( VALE = 0.3 )

K_IC = DEFI_FONCTION ( NOM_PARA    = 'TEMP',
                    VALE = (
                            0.00000E+00, 3.75976E+07,
                            1.00000E+00, 3.77849E+07,
                            2.00000E+00, 3.79760E+07,
                            3.00000E+00, 3.81709E+07,
                            4.00000E+00, 3.83699E+07,
                            5.00000E+00, 3.85732E+07,
                            6.00000E+00, 3.87808E+07,
                            7.00000E+00, 3.89930E+07,
                            8.00000E+00, 3.92099E+07,
                            9.00000E+00, 3.94318E+07,
                            1.00000E+01, 3.96587E+07,
                            1.10000E+01, 3.98910E+07,
                            1.20000E+01, 4.01287E+07,
                            1.30000E+01, 4.03722E+07,
                            1.40000E+01, 4.06216E+07,
                            1.50000E+01, 4.08772E+07,
                            1.60000E+01, 4.11392E+07,
                            1.70000E+01, 4.14079E+07,
                            1.80000E+01, 4.16835E+07,
                            1.90000E+01, 4.19663E+07,
                            2.00000E+01, 4.22566E+07,
                            2.10000E+01, 4.25546E+07,
                            2.20000E+01, 4.28606E+07,
                            2.30000E+01, 4.31751E+07,
                            2.40000E+01, 4.34982E+07,
                            2.50000E+01, 4.38303E+07,
                            2.60000E+01, 4.41719E+07,
                            2.70000E+01, 4.45232E+07,
                            2.80000E+01, 4.48846E+07,
                            2.90000E+01, 4.52565E+07,
                            3.00000E+01, 4.56393E+07,
                            3.10000E+01, 4.60335E+07,
                            3.20000E+01, 4.64394E+07,
                            3.30000E+01, 4.68576E+07,
                            3.40000E+01, 4.72885E+07,
                            3.50000E+01, 4.77326E+07,
                            3.60000E+01, 4.81904E+07,
                            3.70000E+01, 4.86625E+07,
                            3.80000E+01, 4.91493E+07,
                            3.90000E+01, 4.96515E+07,
                            4.00000E+01, 5.01697E+07,
                            4.10000E+01, 5.07045E+07,
                            4.20000E+01, 5.12565E+07,
                            4.30000E+01, 5.18264E+07,
                            4.40000E+01, 5.24149E+07,
                            4.50000E+01, 5.30227E+07,
                            4.60000E+01, 5.36506E+07,
                            4.70000E+01, 5.42992E+07,
                            4.80000E+01, 5.49696E+07,
                            4.90000E+01, 5.56624E+07,
                            5.00000E+01, 5.63785E+07,
                            5.10000E+01, 5.71189E+07,
                            5.20000E+01, 5.78845E+07,
                            5.30000E+01, 5.86762E+07,
                            5.40000E+01, 5.94952E+07,
                            5.50000E+01, 6.03423E+07,
                            5.60000E+01, 6.12188E+07,
                            5.70000E+01, 6.21258E+07,
                            5.80000E+01, 6.30644E+07,
                            5.90000E+01, 6.40358E+07,
                            6.00000E+01, 6.50414E+07,
                            6.10000E+01, 6.60825E+07,
                            6.20000E+01, 6.71604E+07,
                            6.30000E+01, 6.82765E+07,
                            6.40000E+01, 6.94324E+07,
                            6.50000E+01, 7.06296E+07,
                            6.60000E+01, 7.18697E+07,
                            6.70000E+01, 7.31543E+07,
                            6.80000E+01, 7.44852E+07,
                            6.90000E+01, 7.58641E+07,
                            7.00000E+01, 7.72930E+07,
                            7.10000E+01, 7.87737E+07,
                            7.20000E+01, 8.03083E+07,
                            7.30000E+01, 8.18988E+07,
                            7.40000E+01, 8.35475E+07,
                            7.50000E+01, 8.52565E+07,
                            7.60000E+01, 8.70283E+07,
                            7.70000E+01, 8.88651E+07,
                            7.80000E+01, 9.07696E+07,
                            7.90000E+01, 9.27444E+07,
                            8.00000E+01, 9.47923E+07,
                            8.10000E+01, 9.69159E+07,
                            8.20000E+01, 9.91183E+07,
                            8.30000E+01, 1.01402E+08,
                            8.40000E+01, 1.03772E+08,
                            8.50000E+01, 1.06229E+08,
                            8.60000E+01, 1.08778E+08,
                            8.70000E+01, 1.11423E+08,
                            8.80000E+01, 1.14166E+08,
                            8.90000E+01, 1.17012E+08,
                            9.00000E+01, 1.19965E+08,
                            9.10000E+01, 1.23029E+08,
                            9.20000E+01, 1.26208E+08,
                            9.30000E+01, 1.29506E+08,
                            9.40000E+01, 1.32929E+08,
                            9.50000E+01, 1.36481E+08,
                            9.60000E+01, 1.40167E+08,
                            9.70000E+01, 1.43992E+08,
                            9.80000E+01, 1.47962E+08,
                            9.90000E+01, 1.52083E+08,
                            1.00000E+02, 1.56359E+08,
                            1.01000E+02, 1.60797E+08,
                            1.02000E+02, 1.65404E+08,
                            1.03000E+02, 1.70186E+08,
                            1.04000E+02, 1.75150E+08,
                            1.05000E+02, 1.80302E+08,
                            1.06000E+02, 1.85650E+08,
                            1.07000E+02, 1.91202E+08,
                            1.08000E+02, 1.96966E+08,
                            1.09000E+02, 2.02949E+08,
                            1.10000E+02, 2.09161E+08,
                            1.11000E+02, 2.15610E+08,
                            1.12000E+02, 2.22305E+08,
                            1.13000E+02, 2.29255E+08,
                            1.14000E+02, 2.36472E+08,
                            1.15000E+02, 2.40934E+08,
                            1.16000E+02, 2.40934E+08),
                        PROL_DROITE = 'LINEAIRE',
                        PROL_GAUCHE = 'LINEAIRE')

MAME_MET = DEFI_MATERIAU (
                 ELAS_FO  =_F (
                      E              = YOUNGMET,
                      NU             = NUMET,
                              ),
                 RUPT_FM =  _F( KIC = K_IC )
                         )


CHMAT_ME = AFFE_MATERIAU ( MAILLAGE = MAIL,
                           AFFE     =(
                                    _F ( GROUP_MA = 'M',
                                         MATER    = MAME_MET,),),
                           AFFE_VARC=(_F(GROUP_MA = ('M'),
                                         NOM_VARC = 'TEMP',
                                         EVOL = TEMP2,
                                         VALE_REF = 291.0 ),)
                         )

affe = []
for i in inst:
    champ = CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',
                                  OPERATION='AFFE',
                                  MAILLAGE=MAIL,
                                  AFFE=_F(TOUT="OUI",
                                          NOM_CMP=("DX", "DY", "DZ"),
                                          VALE=(0, 0, 0)
                                          )
                        )
    affe.append({"CHAM_GD": champ, "INST": i, "MODELE": MO_MECA, "CHAM_MATER": CHMAT_ME})

SIG_pl=CREA_RESU(OPERATION='AFFE',
                 TYPE_RESU='EVOL_NOLI',
                 NOM_CHAM='DEPL',
                 AFFE=affe)

# récupération de la table G
# ===

TABLE_G = LIRE_TABLE(UNITE = 31)

# appel à POST_FM
# ===

FM = POST_FM(RESULTAT=SIG_pl,
             TABLE_G=TABLE_G,
             GROUP_NO="PFFM")

#print(FM.EXTR_TABLE())

# tests
# ===

TEST_TABLE(TYPE_TEST="MIN",
           VALE_CALC=39.0786,
           NOM_PARA="TEMP",
           TABLE=FM)

TEST_TABLE(TYPE_TEST="MIN",
           VALE_CALC=49692276.9091023,
           NOM_PARA="KIC",
           TABLE=FM)

TEST_TABLE(TYPE_TEST="MAX",
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.002,
           VALE_CALC=61183693.25678746,
           VALE_REFE=61.2548*1e6,
           NOM_PARA="KELAS",
           TABLE=FM)

TEST_TABLE(TYPE_TEST="MAX",
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.002,
           VALE_CALC=76885447.8196958,
           VALE_REFE=76.9762*1e6,
           NOM_PARA="KPLAS",
           TABLE=FM)

TEST_TABLE(TYPE_TEST="MAX",
           VALE_CALC=76885447.8196958,
           NOM_PARA="KCP",
           TABLE=FM)

TEST_TABLE(TYPE_TEST="MIN",
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.005,
           VALE_CALC=1.2208963668112616,
           VALE_REFE=1.215567442725526,
           NOM_PARA="FM_ASN",
           TABLE=FM)

TEST_TABLE(FILTRE=_F(NOM_PARA="INST",
                     VALE=3300.),
           TYPE_TEST="MAX",
           VALE_CALC=1.2208963668112616,
           NOM_PARA="FM_ASN",
           TABLE=FM)

FIN()
