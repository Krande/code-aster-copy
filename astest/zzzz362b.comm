# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *
from code_aster import CA

DEBUT(CODE="OUI", IGNORE_ALARM="MODELISA4_6", DEBUG=_F(SDVERI="OUI"))

# ###################################################
# ###################################################
#
# Utilisation d'un maillage lineaire pour tester la
# coherence entre les modelisations suivantes :
#
#  - MECANIQUE / C_PLAN
#  - MECANIQUE / C_PLAN / avec contact
#  - MECANIQUE / D_PLAN
#  - MECANIQUE / D_PLAN / avec contact
#  - MECANIQUE / AXIS
#  - THERMIQUE / PLAN
#  - THERMIQUE / AXIS
#  - MECANIQUE / D_PLAN_HM
#  - MECANIQUE / D_PLAN_HM / avec contact
#
# ###################################################
# ###################################################

# ###################################################
# Maillage
# ###################################################

MA1 = LIRE_MAILLAGE(FORMAT="MED")

MAILLALI = CREA_MAILLAGE(
    MAILLAGE=MA1,
    CREA_POI1=(
        _F(NOM_GROUP_MA="POCOUPE1", GROUP_NO="NORPHHAU"),
        _F(NOM_GROUP_MA="POCOUPE2", GROUP_NO="NORPHBAS"),
    ),
)

# ###################################################
# Definition des modeles sains
# ###################################################

# MLMECPS : Modele Lineaire MEcanique Contraintes Planes Sain
MLMECPS = AFFE_MODELE(
    MAILLAGE=MAILLALI,
    AFFE=(
        _F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="C_PLAN"),
        _F(GROUP_MA=("POCOUPE1", "POCOUPE2"), PHENOMENE="MECANIQUE", MODELISATION="2D_DIS_T"),
    ),
)

# MLMEDPS : Modele Lineaire MEcanique Deformations Planes Sain
MLMEDPS = AFFE_MODELE(
    MAILLAGE=MAILLALI,
    AFFE=(
        _F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="D_PLAN"),
        _F(GROUP_MA=("POCOUPE1", "POCOUPE2"), PHENOMENE="MECANIQUE", MODELISATION="2D_DIS_T"),
    ),
)

# MLMEAXS : Modele Lineaire MEcanique AXis Sain
MLMEAXS = AFFE_MODELE(
    MAILLAGE=MAILLALI, AFFE=(_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="AXIS"),)
)

# MLTHPLS : Modele Lineaire THermique PLan Sain
MLTHPLS = AFFE_MODELE(
    MAILLAGE=MAILLALI, AFFE=_F(TOUT="OUI", PHENOMENE="THERMIQUE", MODELISATION="PLAN")
)

# MLTHAXS : Modele Lineaire THermique AXis Sain
MLTHAXS = AFFE_MODELE(
    MAILLAGE=MAILLALI, AFFE=_F(TOUT="OUI", PHENOMENE="THERMIQUE", MODELISATION="AXIS")
)

# ###################################################
# Definition des fissures
# ###################################################

a = 10.0
h = a / 18.0

FISSLI1 = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(FORM_FISS="DEMI_DROITE", PFON=(0.25 * a, 0.25 * a, 0.0), DTAN=(1.0, 0.0, 0.0)),
)

FISSLI2 = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(FORM_FISS="DEMI_DROITE", PFON=(0.25 * a, 0.75 * a, 0.0), DTAN=(1.0, 0.0, 0.0)),
)

FISSLI3 = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(FORM_FISS="DEMI_DROITE", PFON=(a - 1.5 * h, 0.5 * h, 0.0), DTAN=(-1.0, 0.0, 0.0)),
)

# "subtilite" due au contact : on va definir 3 modeles enrichis avec contact,
# or MODI_MODELE_XFEM ecrit dans les sd_fiss_xfem (base globale) l'objet
# '.MAILFISS.CONT' donc on ne peut pas utiliser deux fois le meme jeu
# de fissures, d'ou les definitions redondantes ci-dessous

FISSLI1C = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(FORM_FISS="DEMI_DROITE", PFON=(0.25 * a, 0.25 * a, 0.0), DTAN=(1.0, 0.0, 0.0)),
)

FISSLI2C = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(FORM_FISS="DEMI_DROITE", PFON=(0.25 * a, 0.75 * a, 0.0), DTAN=(1.0, 0.0, 0.0)),
)

FISSLI3C = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(FORM_FISS="DEMI_DROITE", PFON=(a - 1.5 * h, 0.5 * h, 0.0), DTAN=(-1.0, 0.0, 0.0)),
)

FISSLI1D = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(FORM_FISS="DEMI_DROITE", PFON=(0.25 * a, 0.25 * a, 0.0), DTAN=(1.0, 0.0, 0.0)),
)

FISSLI2D = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(FORM_FISS="DEMI_DROITE", PFON=(0.25 * a, 0.75 * a, 0.0), DTAN=(1.0, 0.0, 0.0)),
)

FISSLI3D = DEFI_FISS_XFEM(
    MAILLAGE=MAILLALI,
    TYPE_DISCONTINUITE="FISSURE",
    DEFI_FISS=_F(FORM_FISS="DEMI_DROITE", PFON=(a - 1.5 * h, 0.5 * h, 0.0), DTAN=(-1.0, 0.0, 0.0)),
)

# ###################################################
# Definition des modeles enrichis
# ###################################################

# MLMECPX  : Modele Lineaire MEcanique Contraintes Planes Xfem
MLMECPX = MODI_MODELE_XFEM(MODELE_IN=MLMECPS, FISSURE=(FISSLI1, FISSLI2, FISSLI3))

# MLMECPXC : Modele Lineaire MEcanique Contraintes Planes Xfem Contact
MLMECPXC = MODI_MODELE_XFEM(
    MODELE_IN=MLMECPS, FISSURE=(FISSLI1, FISSLI2, FISSLI3), CONTACT="STANDARD"
)

# MLMEDPX  : Modele Lineaire MEcanique Deformations Planes Xfem
MLMEDPX = MODI_MODELE_XFEM(MODELE_IN=MLMEDPS, FISSURE=(FISSLI1, FISSLI2, FISSLI3))

# MLMEDPXC : Modele Lineaire MEcanique Deformations Planes Xfem Contact
MLMEDPXC = MODI_MODELE_XFEM(
    MODELE_IN=MLMEDPS, FISSURE=(FISSLI1C, FISSLI2C, FISSLI3C), CONTACT="STANDARD"
)

# MLMEAXX : Modele Lineaire MEcanique AXis Xfem
MLMEAXX = MODI_MODELE_XFEM(MODELE_IN=MLMEAXS, FISSURE=(FISSLI1, FISSLI2, FISSLI3))

# MLMEAXX : Modele Lineaire MEcanique AXis Xfem
MLMEAXXC = MODI_MODELE_XFEM(MODELE_IN=MLMEAXS, FISSURE=(FISSLI1D, FISSLI2D, FISSLI3D))

# MLTHPLX : Modele Lineaire THermique PLan Xfem
MLTHPLX = MODI_MODELE_XFEM(MODELE_IN=MLTHPLS, FISSURE=(FISSLI1, FISSLI2, FISSLI3))

# MLTHAXX : Modele Lineaire THermique AXis Xfem
MLTHAXX = MODI_MODELE_XFEM(MODELE_IN=MLTHAXS, FISSURE=(FISSLI1, FISSLI2, FISSLI3))

# "Post-traitements" des fichiers obtenus avec IMPR_CO

# On veut comparer que les objets issus de MODI_MODELE_XFEM sont semblables.
# On filtre les lignes fournies par UTIMSD contenant des valeurs (.VALE/.CELV).
# On compare la somme de contr√¥le (SOMMI ou SOMMR).


def getVALE(model, filter, debug=False):
    """Extract relevant lines from UTIMSD about values."""
    from code_aster.Helpers import LogicalUnitFile

    tmpfile = LogicalUnitFile.new_free()
    IMPR_CO(CONCEPT=_F(NOM=model), NIVEAU=-1, UNITE=tmpfile.unit, PERMUTATION="NON")

    with open(tmpfile.filename, "r") as fsd:
        lines = fsd.readlines()
        vale = []
        for line in lines:
            line = line.replace(model.getName(), "obj_name")
            spl = line.split("|")
            if len(spl) < 2:
                continue
            if filter(spl[1]):
                vale.append(spl[1] + " | " + spl[-1])
    if debug:
        print(">>>", model.userName, "<<<")
        print("".join(vale))
    return vale


func_test = lambda txt: "TOPO" in txt and ".CELV" in txt

valMECPX = getVALE(MLMECPX, func_test, debug=False)
valMECPXC = getVALE(MLMECPXC, func_test, debug=False)
valMEDPX = getVALE(MLMEDPX, func_test, debug=False)
valMEDPXC = getVALE(MLMEDPXC, func_test, debug=False)
valMEAXX = getVALE(MLMEAXX, func_test, debug=False)
valTHPLX = getVALE(MLTHPLX, func_test, debug=False)
valTHAXX = getVALE(MLTHAXX, func_test, debug=False)
valMEAXXC = getVALE(MLMEAXXC, func_test, debug=False)


test = CA.TestCase()

test.assertEqual(len(valMECPX), len(valMECPXC), msg="size of valMECPX/valMECPXC")
test.assertEqual(len(valMECPX), len(valMEDPX), msg="size of valMECPX/valMEDPX")
test.assertEqual(len(valMECPX), len(valMEDPXC), msg="size of valMECPX/valMEDPXC")
test.assertEqual(len(valMECPX), len(valMEAXX), msg="size of valMECPX/valMEAXX")
test.assertEqual(len(valMECPX), len(valTHPLX), msg="size of valMECPX/valTHPLX")
test.assertEqual(len(valMECPX), len(valTHAXX), msg="size of valMECPX/valTHAXX")
test.assertEqual(len(valMECPX), len(valMEAXXC), msg="size of valMECPX/valMEAXXC")

test.assertSequenceEqual(valMECPX, valMECPXC, msg="valMECPX vs valMECPXC")
test.assertSequenceEqual(valMECPX, valMEDPX, msg="valMECPX vs valMEDPX")
test.assertSequenceEqual(valMECPX, valMEDPXC, msg="valMECPX vs valMEDPXC")
test.assertSequenceEqual(valMECPX, valMEAXX, msg="valMECPX vs valMEAXX")
test.assertSequenceEqual(valMECPX, valTHPLX, msg="valMECPX vs valTHPLX")
test.assertSequenceEqual(valMECPX, valTHAXX, msg="valMECPX vs valTHAXX")
test.assertSequenceEqual(valMECPX, valMEAXXC, msg="valMECPX vs valMEAXXC")

# ###################################################
# ###################################################
#
# Utilisation d'un maillage quadratique pour tester la
# coherence entre les modelisations suivantes :
#
#  - MECANIQUE / D_PLAN
#  - MECANIQUE / D_PLAN_HM
#
# Rq :
#
# -> pour la definition du modele enrichi HM, il n'existe
#    pas d'elements cracktip. On travaille donc uniquement
#    avec une interface
#
# ###################################################
# ###################################################

MAILLAQU = CREA_MAILLAGE(MAILLAGE=MA1, LINE_QUAD=_F(TOUT="OUI"))

# ################################################################
# Definition des modeles sains
# ################################################################

# MQMEDPS : Modele Quadratique MEcanique Deformations Planes Sain
MQMEDPS = AFFE_MODELE(
    MAILLAGE=MAILLAQU, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="D_PLAN")
)

# MQHMDPS : Modele Quadratique Hydro-Mecanique Deformations Planes Sain
MQHMDPS = AFFE_MODELE(
    MAILLAGE=MAILLAQU, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="D_PLAN_HM")
)

# ###################################################
# Definition de l'interface
# ###################################################

LN = FORMULE(VALE="Y-0.25*a", a=a, NOM_PARA=["X", "Y"])

INTEQU = DEFI_FISS_XFEM(MAILLAGE=MAILLAQU, TYPE_DISCONTINUITE="INTERFACE", DEFI_FISS=_F(FONC_LN=LN))

# ###################################################
# Definition des modeles enrichis
# ###################################################

# MQMEDPX : Modele Quadratique MEcanique Deformations Planes Xfem
MQMEDPX = MODI_MODELE_XFEM(MODELE_IN=MQMEDPS, FISSURE=INTEQU)

# MQHMDPX : Modele Quadratique Hydro-Mecanique Deformations Planes Xfem
MQHMDPX = MODI_MODELE_XFEM(MODELE_IN=MQHMDPS, FISSURE=INTEQU)

# MQHMDPXC : Modele Quadratique Hydro-Mecanique Deformations Planes Xfem avec contact
MQHMDPXC = MODI_MODELE_XFEM(MODELE_IN=MQHMDPS, FISSURE=INTEQU, CONTACT="STANDARD")

# ###################################################
# Impression du contenu des modeles xfem obtenus :
# ###################################################

valMQMEDPX = getVALE(MQMEDPX, func_test, debug=True)
valMQHMDPX = getVALE(MQHMDPX, func_test, debug=True)
valMQHMDPXC = getVALE(MQHMDPXC, func_test, debug=True)

test.assertEqual(len(valMQMEDPX), len(valMQHMDPX), msg="size of valMQMEDPX/valMQHMDPX")
test.assertEqual(len(valMQMEDPX), len(valMQHMDPXC), msg="size of valMQMEDPX/valMQHMDPXC")

test.assertSequenceEqual(valMQMEDPX, valMQHMDPX, msg="valMQMEDPX vs valMQHMDPX")
test.assertSequenceEqual(valMQMEDPX, valMQHMDPXC, msg="valMQMEDPX vs valMQHMDPXC")

test.printSummary()

FIN()
