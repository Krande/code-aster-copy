# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# Objectif: Verification analytique de la marge ELS VERI_FERRAILLAGE: On impose
# un chargement proportionnel aux points particuliers calculés analytiquement
# La marge attendue est égale à  1 - coef. de proportionalité

DEBUT(
    CODE="OUI",
    ERREUR=_F(ALARME="ALARME"),
    DEBUG=_F(SDVERI="OUI"),
    IGNORE_ALARM=("CALCULEL_83", "CALCULEL_88", "CALCULEL7_28"),
)

MA = LIRE_MAILLAGE(FORMAT="MED", UNITE=20)

MODEL = AFFE_MODELE(
    MAILLAGE=MA, AFFE=_F(GROUP_MA="PLAQUE", PHENOMENE="MECANIQUE", MODELISATION="DKT")
)

CARA = AFFE_CARA_ELEM(MODELE=MODEL, COQUE=_F(GROUP_MA="PLAQUE", EPAIS=0.50))


# Ferraillage de reference

# dnsxi = phi20@200 = 0.00157 m2/m
# dnsxs = phi20@200 = 0.00157 m2/m
# dnsyi = phi20@200 = 0.00157 m2/m
# dnsys = phi20@200 = 0.00157 m2/m


FERRAILLAGE_REF1 = CREA_CHAMP(
    AFFE=(
        _F(
            GROUP_MA=("PLAQUE",),
            NOM_CMP=("DNSXI", "DNSXS", "DNSYI", "DNSYS"),
            VALE=(0.00157, 0.00157, 0.00157, 0.00157),
        ),
    ),
    MODELE=MODEL,
    OPERATION="AFFE",
    PROL_ZERO="OUI",
    OPTION="FERR_ELEM",
    TYPE_CHAM="ELEM_FER2_R",
)


# traction uniforme - pivot A vertical - Marge attendue : 0.5
CHEFF1 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(0.0, 1.256e6 * 0.5, 0.0, 0.0, 0, 0.0, 0.0, 0.0),
    ),
)

# traction uniforme - pivot A vertical - Marge attendue : -1
CHEFF2 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(0.0, 1.256e6 * 2, 0.0, 0.0, 0, 0.0, 0.0, 0.0),
    ),
)

# Pivot A (acier inf) & Pivot B (beton sup) - Marge attendue : 0.3
CHEFF3 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(0.0, -1.0336e6 * 0.7, 0.0, 0.0, -0.427e06 * 0.7, 0.0, 0.0, 0.0),
    ),
)

# Pivot B sigmabs = sigmamax sigmabinf = 0- Marge attendue : 0.8
CHEFF4 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(0.0, -4.89564e6 * 0.2, 0.0, 0.0, -0.4207e6 * 0.2, 0.0, 0.0, 0.0),
    ),
)


# Compression uniforme - Pivot C - Marge attendue : 1
CHEFF5 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(0.0, -9.79128e06 * 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0),
    ),
)

# Compression uniforme - Pivot C - Marge attendue : 0.6
CHEFF6 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(0.0, -9.79128e06 * 0.4, 0.0, 0.0, 0, 0.0, 0.0, 0.0),
    ),
)


### Partie inferieure du diagramme d interaction - Symetrie

# Pivot A (acier inf) & Pivot B (beton sup) - Marge attendue : 0.3
CHEFF7 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(0.0, -1.0336e6 * 0.7, 0.0, 0.0, 0.427e06 * 0.7, 0.0, 0.0, 0.0),
    ),
)

# Pivot B sigmabs = sigmamax sigmabinf = 0- Marge attendue : 0.8
CHEFF8 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(0.0, -4.89564e6 * 0.2, 0.0, 0.0, 0.4207e6 * 0.2, 0.0, 0.0, 0.0),
    ),
)

# efforts multidirectionnels
CHEFF9 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(1e6, 1e6, 0.5e6, 0.0, 0.0, 0.0, 0.0, 0.0),
    ),
)

CHEFF10 = CREA_CHAMP(
    MAILLAGE=MA,
    OPERATION="AFFE",
    TYPE_CHAM="CART_SIEF_R",
    AFFE=_F(
        GROUP_MA="PLAQUE",
        NOM_CMP=("NXX", "NYY", "NXY", "MXX", "MYY", "MXY", "QX", "QY"),
        VALE=(-6e6, -0.5e6, 0.0, -0.2e6, -0.15e6, 0.0, 0.0, 0.0),
    ),
)


# on cree une sd evol_elas avec des champs d'efforts imposes :
# -------------------------------------------------------------

RESUELS = CREA_RESU(
    OPERATION="AFFE",
    TYPE_RESU="EVOL_ELAS",
    AFFE=(
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF1, INST=1.0, MODELE=MODEL, CARA_ELEM=CARA),
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF2, INST=2.0, MODELE=MODEL, CARA_ELEM=CARA),
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF3, INST=3.0, MODELE=MODEL, CARA_ELEM=CARA),
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF4, INST=4.0, MODELE=MODEL, CARA_ELEM=CARA),
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF5, INST=5.0, MODELE=MODEL, CARA_ELEM=CARA),
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF6, INST=6.0, MODELE=MODEL, CARA_ELEM=CARA),
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF7, INST=7.0, MODELE=MODEL, CARA_ELEM=CARA),
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF8, INST=8.0, MODELE=MODEL, CARA_ELEM=CARA),
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF9, INST=9.0, MODELE=MODEL, CARA_ELEM=CARA),
        _F(NOM_CHAM="EFGE_ELNO", CHAM_GD=CHEFF10, INST=10.0, MODELE=MODEL, CARA_ELEM=CARA),
    ),
)

lordre = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
L_ORDRE = DEFI_LIST_ENTI(VALE=lordre)


MARGE = VERI_FERRAILLAGE(
    RESULTAT=RESUELS,
    reuse=RESUELS,
    CARA_ELEM=CARA,
    CODIFICATION="EC2",
    TYPE_COMB="ELS",
    UNITE_CONTRAINTE="Pa",
    UNITE_DIMENSION="m",
    LIST_ORDRE=L_ORDRE,
    CHAM_FERR=FERRAILLAGE_REF1,
    AFFE=(
        _F(
            TOUT="OUI",
            # Enrobage (2D)
            C_SUP=0.08,
            C_INF=0.08,
            #
            SIGS_ELS=400000000,
            SIGC_INF_ELS=18000000,
            SIGC_SUP_ELS=18000000,
            FYK=500000000,
            FCK=30000000,
            # Steel/concrete modulus ratio
            ALPHA_E=14,
        ),
    ),
)

marge_ref = [
    [0.5],  # 1
    [-1],  # 2
    [0.3],  # 3
    [0.8],  # 4
    [1.0],  # 5
    [0.6],  # 6
    [0.3],  # 7
    [0.8],  # 8
    [-0.194],  # 9
    [0.149],  # 10
]

marge_calc = [
    [0.5],  # 1
    [-1.0],  # 2
    [0.31389159506265274],  # 3
    [0.8000001254052911],  # 4
    [1.0],  # 5
    [0.6],  # 6
    [0.31573029618279624],  # 7
    [0.8000001254052911],  # 8
    [-0.19426751592356695],  # 9
    [0.14825047057815788],  # 10
]


theta_ref = [
    [-90.0],  # 1
    [-90.0],  # 2
    [-90.0],  # 3
    [-90.0],  # 4
    [-90.0],  # 5
    [-90.0],  # 6
    [-90.0],  # 7
    [-90.0],  # 8
    [-45.0],  # 9
    [0.0],  # 10
]

theta_calc = [
    [-90.0],  # 1
    [-90.0],  # 2
    [-90.0],  # 3
    [-90.0],  # 4
    [-90.0],  # 5
    [-90.0],  # 6
    [-90.0],  # 7
    [-90.0],  # 8
    [-44.999999994124245],  # 9
    [-2.703471478890989e-14],  # 10
]

for j in range(len(marge_ref)):
    TEST_RESU(
        RESU=_F(
            RESULTAT=RESUELS,
            INST=j + 1.0,
            NOM_CHAM="MARG_ELEM",
            NOM_CMP="MARGE",
            GROUP_MA="M1",
            LEGENDE="ELS",
            VALE_REFE=marge_ref[j],
            VALE_CALC=marge_calc[j],
            REFERENCE="ANALYTIQUE",
            PRECISION=0.05,
            CRITERE="ABSOLU",
        )
    )

for j in range(len(theta_ref)):
    TEST_RESU(
        RESU=_F(
            RESULTAT=RESUELS,
            INST=j + 1.0,
            NOM_CHAM="MARG_ELEM",
            NOM_CMP="THETA",
            GROUP_MA="M1",
            LEGENDE="ELS",
            VALE_REFE=theta_ref[j],
            VALE_CALC=theta_calc[j],
            REFERENCE="ANALYTIQUE",
            PRECISION=0.1,
            CRITERE="ABSOLU",
        )
    )

FIN()
