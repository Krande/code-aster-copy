variables:
  MINIO_URL: https://minio.retd.edf.fr
  MINIO_MC: ./mc --insecure
  ROOT_URL: https://$GITLAB_TOKEN_NAME:$GITLAB_TOKEN@gitlab.pleiade.edf.fr/codeaster
  PREREQ_VERSION: 20240327
  OSNAME: debian-11
  IMAGE_URL: ${DOCKER_NEXUS_URL}/codeaster-prerequisites:${PREREQ_VERSION}-${OSNAME}
  BUILD: mpi
  BUILDTYPE: ci
  REFREV: ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
  GIT_SSL_NO_VERIFY: "true"
  NPROC_MAX: 12
  reg_debugging: '/^debugci.*/'
  FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR: "true"

default:
  tags:
    - docker-executor

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_REF_NAME == "main" && $CI_PIPELINE_SOURCE == "schedule"
      variables:
        REFREV: main
    - if: $CI_COMMIT_REF_NAME =~ $reg_debugging
      variables:
        BUILD: debug
    - if: $BUILDTYPE == "code-checking"
    - if: $BUILDTYPE == "docker"
  auto_cancel:
    on_new_commit: interruptible

stages:
  - setup
  - build
  - test
  - code-checking

image:
  name: ${IMAGE_URL}

prepare:
  interruptible: true
  stage: setup
  script:
    - .gitlabci/prepare.sh
  artifacts:
    paths:
      - devtools/*
      - data-src/*
    expire_in: 6 hours
  rules:
    - if: $BUILDTYPE != "code-checking" && $BUILDTYPE != "docker"

compile:
  interruptible: true
  stage: build
  needs: ["prepare"]
  script:
    - .gitlabci/compile.sh
  artifacts:
    paths:
      - .lock*
      - build/mpi*/config.log
      - build/mpi*/c4che/*
      - build/mpi*/*/*.h
      - build/mpi*/*/*.py
      - build/mpi*/*/code_aster/*.py
      - build/mpi*/*/*/*.so
      - build/mpi*/*/catalo/elem.1
      - build/mpi*/*/*.mod
      - install/*
    expire_in: 3 days
  rules:
    - if: $BUILDTYPE != "code-checking" && $BUILDTYPE != "docker"

doc_html:
  interruptible: true
  stage: build
  needs: ["prepare", "compile"]
  script:
    - .gitlabci/doc_html.sh
  artifacts:
    paths:
      - install/share/doc/html/*
    expire_in: 3 days
  rules:
    - if: $CI_MERGE_REQUEST_IID

minimal_build:
  interruptible: true
  stage: test
  needs: ["prepare", "compile", "check_source"]
  script:
    - .gitlabci/compile_minimal.sh
  rules:
    - if: $CI_MERGE_REQUEST_IID

check_source:
  interruptible: true
  stage: test
  needs: ["prepare", "compile"]
  script:
    - .gitlabci/check_source.sh
  artifacts:
    paths:
      - list_issues.txt
    expire_in: 3 days
  rules:
    - if: $CI_MERGE_REQUEST_IID

check_issues:
  interruptible: true
  stage: test
  needs: ["prepare", "check_source"]
  script:
    - .gitlabci/check_issues.sh
  rules:
    - if: $CI_MERGE_REQUEST_IID

minimal_test:
  interruptible: true
  stage: test
  needs: ["prepare", "compile"]
  script:
    - .gitlabci/test.sh
        -R "(asrun0|mumps02b|supv002|vocab0|zzzz509j)"
        --resutest=results_mini
  artifacts:
    when: always
    paths:
      - results_mini/run_testcases.xml
      - results_mini/Testing/Temporary/*
      - results_mini/*
    expire_in: 3 days
    reports:
      junit: results_mini/run_testcases.xml
  rules:
    - if: $CI_MERGE_REQUEST_IID

verification_test:
  interruptible: true
  stage: test
  tags:
    - hulk
  needs:
    - job: prepare
    - job: compile
    - job: minimal_test
      optional: true
    - job: check_source
      optional: true
    - job: doc_html
      optional: true
  script:
    - .gitlabci/test.sh
        -L verification
        --exclude-testlist .gitlabci/known_failures-pleiade.list
        --resutest=results
  artifacts:
    when: always
    paths:
      - results/run_testcases.xml
      - results/Testing/Temporary/*
      - results/*
    expire_in: 3 days
    reports:
      junit: results/run_testcases.xml
  rules:
    - if: $BUILDTYPE != "code-checking" && $BUILDTYPE != "docker"  && $CI_COMMIT_REF_NAME !~ $reg_debugging

known_failures_test:
  interruptible: true
  stage: test
  needs: ["prepare", "compile", "minimal_test"]
  script:
    - .gitlabci/test.sh
        --testlist .gitlabci/known_failures-pleiade.list
        --resutest=results_failures
  allow_failure: true
  artifacts:
    when: always
    paths:
      - results_failures/run_testcases.xml
      - results_failures/Testing/Temporary/*
      - results_failures/*
    expire_in: 3 days
    reports:
      junit: results_failures/run_testcases.xml
  rules:
    - if: $CI_MERGE_REQUEST_IID

debugging_test:
  interruptible: true
  stage: test
  needs: ["prepare", "compile"]
  script:
    - .gitlabci/test.sh
        --testlist .gitlabci/debugging.list
        --resutest=results_debugging
  allow_failure: true
  artifacts:
    when: always
    paths:
      - results_debugging/run_testcases.xml
      - results_debugging/Testing/Temporary/*
      - results_debugging/*
    expire_in: 3 days
    reports:
      junit: results_debugging/run_testcases.xml
  rules:
    - if: $CI_COMMIT_REF_NAME =~ $reg_debugging

sonarqube:
  interruptible: true
  stage: code-checking
  image:
    name: nexus.retd.edf.fr:5012/sonarsource/sonar-scanner-cli:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - sonar-scanner
        -Dsonar.projectKey="gitlab-${CI_PROJECT_ID}"
        -Dsonar.projectName="${CI_PROJECT_PATH_SLUG}"
        -Dsonar.host.url="${SQ_SERVER}"
        -Dsonar.login="${SQ_TOKEN}"
        -Dsonar.projectBaseDir=.
        -Dsonar.sources=.
        -Dsonar.exclusions="data,extern,waf*,**/*.export,build/**,install/**"
        -Dsonar.python.file.suffixes=py,comm,com0,com1,com2
        -Dsonar.issue.ignore.multicriteria=f1
        -Dsonar.issue.ignore.multicriteria.f1.ruleKey=f90-rules:F90.DESIGN.Include
        -Dsonar.issue.ignore.multicriteria.f1.resourceKey="f90-rules:**/*.F90"
  variables:
    SQ_SERVER: "https://sonar.pleiade.edf.fr:443"
  allow_failure: true
  rules:
    - if: $BUILDTYPE == "code-checking"

docker:
  stage: build
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $BUILDTYPE == "docker"
  image:
    name: nexus.retd.edf.fr/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - sh .gitlabci/build_docker_codeaster.sh ${OSNAME}
  allow_failure: true
  artifacts:
    paths:
      - artf/codeaster-main-*.dockerfile
    expire_in: 1 day
